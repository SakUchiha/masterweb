[
  {
    "id": "html-intro",
    "title": "HTML Introduction",
    "category": "HTML",
    "difficulty": "Beginner",
    "duration": "25 minutes",
    "summary": "Learn the basics of HTML structure, tags, and elements.",
    "description": "HTML (HyperText Markup Language) is the foundation of web development. In this lesson, you'll learn about HTML structure, basic tags, elements, attributes, and how to create your first webpage.",
    "slides": [
      {
        "id": 1,
        "title": "What is HTML?",
        "content": "<h2>What is HTML?</h2><p>HTML (HyperText Markup Language) is the foundation of web development.</p><p>It's the standard markup language for creating web pages and web applications.</p><p>HTML provides the structure and content of web pages.</p>",
        "type": "content"
      },
      {
        "id": 2,
        "title": "HTML Structure",
        "content": "<h2>HTML Structure</h2><p>HTML describes the structure of a web page using markup.</p><div class='code-example'><code>&lt;h1&gt;Hello World&lt;/h1&gt;</code></div>",
        "type": "content"
      },
      {
        "id": 3,
        "title": "HTML Elements and Tags",
        "content": "<h2>HTML Elements and Tags</h2><p>HTML elements are the building blocks of HTML pages.</p><ul><li>Elements are represented by tags</li><li>Most elements have opening and closing tags</li><li>Some elements are self-closing</li></ul><div class='code-example'><code><p>This is a paragraph.</p></code></div>",
        "type": "content"
      },
      {
        "id": 4,
        "title": "HTML Attributes",
        "content": "<h2>HTML Attributes</h2><p>Attributes provide additional information about HTML elements.</p><ul><li>Attributes are placed in the opening tag</li><li>They come in name/value pairs</li><li>Examples: id, class, src, href, alt</li></ul><div class='code-example'><code><img src='image.jpg' alt='Description'></code></div>",
        "type": "content"
      },
      {
        "id": 5,
        "title": "Common HTML Tags",
        "content": "<h2>Common HTML Tags</h2><ul><li><h1> to <h6> - Headings</li><li><p> - Paragraphs</li><li><a> - Links</li><li><img> - Images</li><li><div> - Divisions/Containers</li><li><span> - Inline containers</li></ul>",
        "type": "content"
      },
      {
        "id": 6,
        "title": "HTML Comments",
        "content": "<h2>HTML Comments</h2><p>Comments are used to add notes to your code that won't be displayed in the browser.</p><div class='code-example'><code><!-- This is a comment --></code></div><p>Comments help you and other developers understand your code.</p>",
        "type": "content"
      },
      {
        "id": 7,
        "title": "HTML Best Practices",
        "content": "<h2>HTML Best Practices</h2><ul><li>Use semantic HTML elements</li><li>Always include alt attributes for images</li><li>Use lowercase for tags and attributes</li><li>Properly nest your elements</li><li>Validate your HTML</li></ul>",
        "type": "content"
      },
      {
        "id": 8,
        "title": "Your First HTML Page",
        "content": "<h2>Your First HTML Page</h2><p>Let's create a simple HTML page together!</p><div class='interactive-demo'>Click 'Next' to start coding!</div>",
        "type": "interactive"
      }
    ],
    "learningObjectives": [
      "Understand what HTML is and its purpose",
      "Learn basic HTML structure and syntax",
      "Identify HTML elements, tags, and attributes",
      "Use common HTML tags appropriately",
      "Create well-structured HTML documents",
      "Follow HTML best practices"
    ],
    "exercise": {
      "description": "Create a simple webpage with headings, paragraphs, links, images, and proper HTML structure.",
      "starter": "<!DOCTYPE html>\n<html>\n<head>\n  <title>My First Webpage</title>\n</head>\n<body>\n  <h1>Welcome to My Website!</h1>\n  <p>This is my first paragraph.</p>\n  <h2>About Me</h2>\n  <p>I am learning HTML and CSS.</p>\n  <img src=\"https://via.placeholder.com/300x200\" alt=\"Placeholder image\">\n  <p>Visit <a href=\"https://www.example.com\">Example Website</a></p>\n  <!-- This is a comment -->\n</body>\n</html>",
      "hints": [
        "Use h1 for main headings and h2 for subheadings",
        "Use p for paragraphs",
        "Always include alt attributes for images",
        "Use a tags for links with href attributes",
        "Add comments to explain your code"
      ]
    },
    "nextLesson": "html-structure"
  },
  {
    "id": "html-structure",
    "title": "HTML Document Structure",
    "category": "HTML",
    "difficulty": "Beginner",
    "duration": "30 minutes",
    "summary": "Learn about HTML document structure, semantic elements, and proper organization.",
    "description": "Understanding the proper structure of an HTML document is crucial for creating well-formed, accessible, and SEO-friendly web pages.",
    "slides": [
      {
        "id": 1,
        "title": "HTML Document Structure",
        "content": "<h2>HTML Document Structure</h2><p>Every HTML document has a specific structure that browsers understand.</p><p>This structure is essential for creating well-formed web pages.</p><p>HTML documents follow a hierarchical structure with parent and child elements.</p>",
        "type": "content"
      },
      {
        "id": 2,
        "title": "Essential Elements",
        "content": "<h2>Essential Elements</h2><ul><li>DOCTYPE declaration - Tells browser which HTML version</li><li>html root element - Contains all other elements</li><li>head section - Metadata and document information</li><li>body section - Visible content of the page</li></ul>",
        "type": "content"
      },
      {
        "id": 3,
        "title": "Document Structure Example",
        "content": "<h2>Document Structure Example</h2><div class='code-example'><pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;title&gt;My Page&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;h1&gt;Hello World&lt;/h1&gt;\n  &lt;/body&gt;\n&lt;/html&gt;</code></pre></div>",
        "type": "code"
      },
      {
        "id": 4,
        "title": "Semantic Elements",
        "content": "<h2>Semantic Elements</h2><p>Use semantic elements to give meaning to your content:</p><ul><li>&lt;header&gt; - Page header</li><li>&lt;main&gt; - Main content</li><li>&lt;article&gt; - Article content</li><li>&lt;footer&gt; - Page footer</li></ul>",
        "type": "content"
      }
    ],
    "learningObjectives": [
      "Understand HTML document structure and hierarchy",
      "Learn about DOCTYPE declarations and head section",
      "Use semantic HTML elements appropriately",
      "Create accessible and SEO-friendly documents",
      "Implement proper navigation structures"
    ],
    "exercise": {
      "description": "Create a complete webpage with proper document structure, semantic elements, and navigation.",
      "starter": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <title>My Website</title>\n</head>\n<body>\n  <header>\n    <h1>My Awesome Website</h1>\n    <nav>\n      <ul>\n        <li><a href=\"#home\">Home</a></li>\n        <li><a href=\"#about\">About</a></li>\n        <li><a href=\"#contact\">Contact</a></li>\n      </ul>\n    </nav>\n  </header>\n  <main>\n    <section id=\"home\">\n      <h2>Welcome Home</h2>\n      <p>This is the home section.</p>\n    </section>\n    <section id=\"about\">\n      <h2>About Us</h2>\n      <article>\n        <h3>Our Story</h3>\n        <p>Learn about our company.</p>\n      </article>\n    </section>\n    <aside>\n      <h3>Latest News</h3>\n      <p>Check out our latest updates.</p>\n    </aside>\n  </main>\n  <footer>\n    <p>&copy; 2024 My Website</p>\n  </footer>\n</body>\n</html>",
      "hints": [
        "Always include DOCTYPE html and proper meta tags",
        "Use semantic elements like header, nav, main, section, article, aside, footer",
        "Create a navigation menu with nav and ul/li elements",
        "Use id attributes for internal linking",
        "Structure content with appropriate semantic elements"
      ]
    },
    "nextLesson": "html-links-images"
  },
  {
    "id": "html-links-images",
    "title": "Links and Images",
    "category": "HTML",
    "difficulty": "Beginner",
    "duration": "35 minutes",
    "summary": "Master links, images, and media elements in HTML.",
    "description": "Links and images are essential for creating engaging, interactive web pages. Learn about different types of links, image optimization, and accessibility best practices.",
    "slides": [
      {
        "id": 1,
        "title": "Adding Links and Images",
        "content": "<h2>Adding Links and Images</h2><p>Links connect pages together, and images make content visually appealing.</p><p>These elements are essential for creating engaging web pages.</p><p>Proper implementation ensures accessibility and SEO benefits.</p>",
        "type": "content"
      },
      {
        "id": 2,
        "title": "Creating Links",
        "content": "<h2>Creating Links</h2><p>Use the &lt;a&gt; tag to create hyperlinks:</p><div class='code-example'><code>&lt;a href='https://example.com'&gt;Visit Example&lt;/a&gt;</code></div>",
        "type": "code"
      },
      {
        "id": 3,
        "title": "Adding Images",
        "content": "<h2>Adding Images</h2><p>Use the &lt;img&gt; tag to add images:</p><div class='code-example'><code>&lt;img src='image.jpg' alt='Description'&gt;</code></div>",
        "type": "code"
      },
      {
        "id": 4,
        "title": "Link Types",
        "content": "<h2>Link Types</h2><ul><li>External links: href='https://example.com'</li><li>Internal links: href='#section'</li><li>Email links: href='mailto:email@example.com'</li></ul>",
        "type": "content"
      }
    ],
    "learningObjectives": [
      "Create different types of hyperlinks",
      "Add images with proper attributes and optimization",
      "Implement responsive images",
      "Use semantic elements for media content",
      "Follow accessibility best practices for links and images"
    ],
    "exercise": {
      "description": "Create a comprehensive webpage with various types of links, optimized images, and semantic media elements.",
      "starter": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <title>My Media Portfolio</title>\n</head>\n<body>\n  <header>\n    <h1>My Creative Portfolio</h1>\n    <nav>\n      <ul>\n        <li><a href=\"#gallery\">Gallery</a></li>\n        <li><a href=\"#contact\">Contact</a></li>\n        <li><a href=\"https://github.com\" target=\"_blank\" rel=\"noopener\">GitHub</a></li>\n      </ul>\n    </nav>\n  </header>\n  \n  <main>\n    <section id=\"gallery\">\n      <h2>Photo Gallery</h2>\n      <figure>\n        <img src=\"https://via.placeholder.com/400x300\" alt=\"Beautiful landscape photo\" width=\"400\" height=\"300\" loading=\"lazy\">\n        <figcaption>A stunning mountain landscape</figcaption>\n      </figure>\n      \n      <figure>\n        <img src=\"https://via.placeholder.com/400x300/ff6b6b\" alt=\"Abstract art piece\" width=\"400\" height=\"300\" loading=\"lazy\">\n        <figcaption>Modern abstract artwork</figcaption>\n      </figure>\n    </section>\n    \n    <section id=\"contact\">\n      <h2>Get In Touch</h2>\n      <p>Email me at <a href=\"mailto:hello@example.com\">hello@example.com</a></p>\n      <p>Call me at <a href=\"tel:+1234567890\">+1 (234) 567-890</a></p>\n      <p>Download my <a href=\"resume.pdf\" download>resume</a></p>\n    </section>\n  </main>\n  \n  <footer>\n    <p>&copy; 2024 My Portfolio. All rights reserved.</p>\n  </footer>\n</body>\n</html>",
      "hints": [
        "Use different link types: external, internal, email, phone, download",
        "Include target='_blank' and rel='noopener' for external links",
        "Always provide descriptive alt text for images",
        "Use figure and figcaption for image captions",
        "Add width and height attributes for better performance",
        "Use loading='lazy' for images below the fold",
        "Implement proper semantic structure with header, nav, main, section, footer"
      ]
    },
    "nextLesson": "css-intro"
  },
  {
    "id": "css-intro",
    "title": "CSS Introduction",
    "category": "CSS",
    "difficulty": "Beginner",
    "duration": "30 minutes",
    "summary": "Master CSS fundamentals, selectors, and styling techniques.",
    "description": "CSS (Cascading Style Sheets) controls the visual appearance of your web pages. Learn about CSS syntax, selectors, the cascade, inheritance, and how to create beautiful, responsive designs.",
    "slides": [
      {
        "id": 1,
        "title": "What is CSS?",
        "content": "<h2>What is CSS?</h2><p>CSS (Cascading Style Sheets) is a stylesheet language used to describe the presentation of HTML documents.</p><p>CSS separates content from presentation, making websites more maintainable and flexible.</p><p>CSS controls layout, colors, fonts, spacing, and visual effects.</p>",
        "type": "content"
      },
      {
        "id": 2,
        "title": "CSS Syntax",
        "content": "<h2>CSS Syntax</h2><p>CSS rules consist of selectors and declarations:</p><div class='code-example'><code>selector {\n  property: value;\n  property: value;\n}</code></div><p>Selectors target HTML elements, properties define what to style, and values specify how to style them.</p>",
        "type": "content"
      },
      {
        "id": 3,
        "title": "CSS Selectors",
        "content": "<h2>CSS Selectors</h2><ul><li><strong>Element selectors:</strong> p, h1, div</li><li><strong>Class selectors:</strong> .classname</li><li><strong>ID selectors:</strong> #idname</li><li><strong>Attribute selectors:</strong> [type=\"text\"]</li><li><strong>Pseudo-classes:</strong> :hover, :first-child</li><li><strong>Pseudo-elements:</strong> ::before, ::after</li></ul>",
        "type": "content"
      },
      {
        "id": 4,
        "title": "The Cascade and Specificity",
        "content": "<h2>The Cascade and Specificity</h2><p>CSS follows rules to determine which styles apply:</p><ol><li><strong>Importance:</strong> !important declarations</li><li><strong>Specificity:</strong> More specific selectors win</li><li><strong>Source order:</strong> Later rules override earlier ones</li><li><strong>Inheritance:</strong> Some properties inherit from parents</li></ol>",
        "type": "content"
      },
      {
        "id": 5,
        "title": "CSS Box Model",
        "content": "<h2>CSS Box Model</h2><p>Every element is a rectangular box with:</p><ul><li><strong>Content:</strong> The actual content</li><li><strong>Padding:</strong> Space inside the border</li><li><strong>Border:</strong> Line around the padding</li><li><strong>Margin:</strong> Space outside the border</li></ul><div class='code-example'><code>box-sizing: border-box;</code></div>",
        "type": "content"
      },
      {
        "id": 6,
        "title": "Common CSS Properties",
        "content": "<h2>Common CSS Properties</h2><ul><li><strong>Colors:</strong> color, background-color</li><li><strong>Typography:</strong> font-family, font-size, font-weight</li><li><strong>Layout:</strong> width, height, margin, padding</li><li><strong>Positioning:</strong> position, top, left, display</li><li><strong>Visual:</strong> border, border-radius, box-shadow</li></ul>",
        "type": "content"
      },
      {
        "id": 7,
        "title": "CSS Units",
        "content": "<h2>CSS Units</h2><ul><li><strong>Absolute:</strong> px, pt, in, cm, mm</li><li><strong>Relative:</strong> em, rem, %, vh, vw</li><li><strong>em:</strong> Relative to parent element's font-size</li><li><strong>rem:</strong> Relative to root element's font-size</li><li><strong>%:</strong> Relative to parent element</li><li><strong>vh/vw:</strong> Relative to viewport height/width</li></ul>",
        "type": "content"
      },
      {
        "id": 8,
        "title": "Adding CSS to HTML",
        "content": "<h2>Adding CSS to HTML</h2><ul><li><strong>Inline:</strong> style attribute on elements</li><li><strong>Internal:</strong> <style> tag in <head></li><li><strong>External:</strong> Link to .css file</li></ul><div class='code-example'><code><link rel=\"stylesheet\" href=\"styles.css\"></code></div><p>External stylesheets are the most maintainable approach.</p>",
        "type": "content"
      }
    ],
    "learningObjectives": [
      "Understand CSS purpose and benefits",
      "Master CSS syntax and selectors",
      "Learn about the cascade, specificity, and inheritance",
      "Apply the box model and common properties",
      "Use appropriate CSS units",
      "Connect CSS to HTML documents"
    ],
    "exercise": {
      "description": "Create a styled webpage using various CSS selectors, properties, and techniques.",
      "starter": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <title>CSS Masterpiece</title>\n  <style>\n    /* Reset and base styles */\n    * {\n      margin: 0;\n      padding: 0;\n      box-sizing: border-box;\n    }\n    \n    body {\n      font-family: 'Arial', sans-serif;\n      line-height: 1.6;\n      color: #333;\n      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n      min-height: 100vh;\n    }\n    \n    .container {\n      max-width: 800px;\n      margin: 0 auto;\n      padding: 20px;\n      background: white;\n      border-radius: 10px;\n      box-shadow: 0 10px 30px rgba(0,0,0,0.1);\n    }\n    \n    h1 {\n      color: #2c3e50;\n      text-align: center;\n      margin-bottom: 30px;\n      font-size: 2.5rem;\n      text-shadow: 2px 2px 4px rgba(0,0,0,0.1);\n    }\n    \n    .card {\n      background: #f8f9fa;\n      border: 1px solid #dee2e6;\n      border-radius: 8px;\n      padding: 20px;\n      margin: 20px 0;\n      transition: transform 0.3s ease;\n    }\n    \n    .card:hover {\n      transform: translateY(-5px);\n      box-shadow: 0 5px 15px rgba(0,0,0,0.2);\n    }\n    \n    .highlight {\n      background-color: #fff3cd;\n      border-left: 4px solid #ffc107;\n      padding: 10px 15px;\n      margin: 15px 0;\n    }\n    \n    button {\n      background: #007bff;\n      color: white;\n      border: none;\n      padding: 12px 24px;\n      border-radius: 5px;\n      cursor: pointer;\n      font-size: 16px;\n      transition: background-color 0.3s ease;\n    }\n    \n    button:hover {\n      background: #0056b3;\n    }\n  </style>\n</head>\n<body>\n  <div class=\"container\">\n    <h1>CSS Styling Showcase</h1>\n    \n    <div class=\"card\">\n      <h2>Welcome to CSS!</h2>\n      <p>This page demonstrates various CSS techniques and properties.</p>\n      <div class=\"highlight\">\n        <p><strong>CSS makes websites beautiful and interactive!</strong></p>\n      </div>\n    </div>\n    \n    <div class=\"card\">\n      <h3>CSS Features Demonstrated:</h3>\n      <ul>\n        <li>Gradient backgrounds</li>\n        <li>Box shadows and borders</li>\n        <li>Hover effects and transitions</li>\n        <li>Responsive design principles</li>\n        <li>Typography and spacing</li>\n      </ul>\n      <button onclick=\"alert('CSS is awesome!')\">Click Me!</button>\n    </div>\n  </div>\n</body>\n</html>",
      "hints": [
        "Use different selectors: element, class, pseudo-class",
        "Experiment with colors, gradients, and shadows",
        "Add hover effects and transitions",
        "Use proper box model properties",
        "Apply responsive design principles",
        "Organize CSS with comments and logical structure"
      ]
    },
    "nextLesson": "css-colors-fonts"
  },
  {
    "id": "css-colors-fonts",
    "title": "Colors and Fonts",
    "category": "CSS",
    "difficulty": "Beginner",
    "duration": "35 minutes",
    "summary": "Master advanced colors, typography, and text styling in CSS.",
    "description": "Learn advanced color techniques, web fonts, text formatting, and create professional typography for modern web design.",
    "slides": [
      {
        "id": 1,
        "title": "Advanced Color Techniques",
        "content": "<h2>Advanced Color Techniques</h2><p>Beyond basic colors, CSS offers powerful color options:</p><ul><li><strong>RGBA:</strong> rgb(255, 0, 0, 0.5) - with transparency</li><li><strong>HSLA:</strong> hsl(0, 100%, 50%, 0.5) - hue, saturation, lightness</li><li><strong>Gradients:</strong> linear-gradient, radial-gradient</li><li><strong>CSS Variables:</strong> --primary-color for reusable colors</li></ul>",
        "type": "content"
      },
      {
        "id": 2,
        "title": "Color Theory and Accessibility",
        "content": "<h2>Color Theory and Accessibility</h2><p>Good color choices improve usability:</p><ul><li><strong>Contrast ratio:</strong> Ensure text is readable</li><li><strong>Color blindness:</strong> Avoid color-only information</li><li><strong>Brand colors:</strong> Consistent color palette</li><li><strong>Dark mode:</strong> prefers-color-scheme media query</li></ul>",
        "type": "content"
      },
      {
        "id": 3,
        "title": "Web Fonts and Google Fonts",
        "content": "<h2>Web Fonts and Google Fonts</h2><p>Expand typography options with web fonts:</p><div class='code-example'><code><link href=\"https://fonts.googleapis.com/css2?family=Roboto:wght@400;700&display=swap\" rel=\"stylesheet\"></code></div><p>Benefits: Consistent rendering, more design options, better accessibility.</p>",
        "type": "content"
      },
      {
        "id": 4,
        "title": "Typography Best Practices",
        "content": "<h2>Typography Best Practices</h2><ul><li><strong>Font stacks:</strong> 'Helvetica Neue', Helvetica, Arial, sans-serif</li><li><strong>Line height:</strong> 1.4-1.6 for body text</li><li><strong>Font size:</strong> 16px minimum for accessibility</li><li><strong>Hierarchy:</strong> Clear size relationships</li><li><strong>Spacing:</strong> Proper letter-spacing and word-spacing</li></ul>",
        "type": "content"
      },
      {
        "id": 5,
        "title": "Advanced Font Properties",
        "content": "<h2>Advanced Font Properties</h2><ul><li><strong>font-variant:</strong> small-caps, normal</li><li><strong>font-stretch:</strong> condensed, expanded</li><li><strong>text-transform:</strong> uppercase, lowercase, capitalize</li><li><strong>text-decoration:</strong> underline, line-through, overline</li><li><strong>text-shadow:</strong> Add depth to text</li></ul>",
        "type": "content"
      },
      {
        "id": 6,
        "title": "Text Layout and Spacing",
        "content": "<h2>Text Layout and Spacing</h2><ul><li><strong>text-align:</strong> left, center, right, justify</li><li><strong>text-indent:</strong> First line indentation</li><li><strong>letter-spacing:</strong> Space between characters</li><li><strong>word-spacing:</strong> Space between words</li><li><strong>white-space:</strong> Control text wrapping</li></ul>",
        "type": "content"
      },
      {
        "id": 7,
        "title": "CSS Custom Properties (Variables)",
        "content": "<h2>CSS Custom Properties (Variables)</h2><p>Define reusable values:</p><div class='code-example'><code>:root {\n  --primary-color: #007bff;\n  --font-size: 16px;\n}\n\n.button {\n  background: var(--primary-color);\n  font-size: var(--font-size);\n}</code></div><p>Benefits: Consistency, easy maintenance, dynamic theming.</p>",
        "type": "content"
      },
      {
        "id": 8,
        "title": "Responsive Typography",
        "content": "<h2>Responsive Typography</h2><p>Typography that adapts to screen size:</p><div class='code-example'><code>h1 {\n  font-size: clamp(2rem, 5vw, 4rem);\n}\n\n@media (max-width: 768px) {\n  body {\n    font-size: 14px;\n  }\n}</code></div><p>Use fluid typography and media queries for optimal readability.</p>",
        "type": "content"
      }
    ],
    "learningObjectives": [
      "Master advanced color techniques and accessibility",
      "Implement web fonts and typography best practices",
      "Apply advanced font and text properties",
      "Use CSS custom properties for maintainable styles",
      "Create responsive typography",
      "Design accessible color schemes"
    ],
    "exercise": {
      "description": "Create a professional webpage with advanced typography, custom color schemes, and responsive design.",
      "starter": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <title>Typography Masterclass</title>\n  <link href=\"https://fonts.googleapis.com/css2?family=Playfair+Display:wght@400;700&family=Inter:wght@300;400;600&display=swap\" rel=\"stylesheet\">\n  <style>\n    :root {\n      --primary-color: #2c3e50;\n      --secondary-color: #3498db;\n      --accent-color: #e74c3c;\n      --text-light: #ecf0f1;\n      --text-dark: #2c3e50;\n      --shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n    }\n    \n    * {\n      margin: 0;\n      padding: 0;\n      box-sizing: border-box;\n    }\n    \n    body {\n      font-family: 'Inter', sans-serif;\n      line-height: 1.6;\n      color: var(--text-dark);\n      background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));\n      min-height: 100vh;\n    }\n    \n    .hero {\n      text-align: center;\n      padding: 4rem 2rem;\n      color: var(--text-light);\n    }\n    \n    .hero h1 {\n      font-family: 'Playfair Display', serif;\n      font-size: clamp(2.5rem, 8vw, 5rem);\n      font-weight: 700;\n      margin-bottom: 1rem;\n      text-shadow: 2px 2px 4px rgba(0,0,0,0.3);\n    }\n    \n    .hero p {\n      font-size: clamp(1.1rem, 3vw, 1.5rem);\n      opacity: 0.9;\n      max-width: 600px;\n      margin: 0 auto;\n    }\n    \n    .content {\n      max-width: 1200px;\n      margin: -2rem auto 0;\n      padding: 2rem;\n      display: grid;\n      grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));\n      gap: 2rem;\n    }\n    \n    .card {\n      background: white;\n      border-radius: 12px;\n      padding: 2rem;\n      box-shadow: var(--shadow);\n      transition: transform 0.3s ease, box-shadow 0.3s ease;\n    }\n    \n    .card:hover {\n      transform: translateY(-5px);\n      box-shadow: 0 8px 25px rgba(0, 0, 0, 0.15);\n    }\n    \n    .card h2 {\n      font-family: 'Playfair Display', serif;\n      color: var(--primary-color);\n      margin-bottom: 1rem;\n      font-size: 1.8rem;\n    }\n    \n    .highlight {\n      background: linear-gradient(120deg, var(--accent-color), var(--secondary-color));\n      -webkit-background-clip: text;\n      -webkit-text-fill-color: transparent;\n      background-clip: text;\n      font-weight: 600;\n    }\n    \n    .color-palette {\n      display: flex;\n      gap: 1rem;\n      margin: 1rem 0;\n      flex-wrap: wrap;\n    }\n    \n    .color-swatch {\n      width: 60px;\n      height: 60px;\n      border-radius: 8px;\n      box-shadow: var(--shadow);\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      color: white;\n      font-weight: 600;\n      font-size: 0.8rem;\n    }\n    \n    @media (max-width: 768px) {\n      .hero {\n        padding: 2rem 1rem;\n      }\n      \n      .content {\n        grid-template-columns: 1fr;\n        padding: 1rem;\n      }\n    }\n  </style>\n</head>\n<body>\n  <section class=\"hero\">\n    <h1>Typography & Colors</h1>\n    <p>Master the art of beautiful web design with advanced CSS techniques</p>\n  </section>\n  \n  <main class=\"content\">\n    <article class=\"card\">\n      <h2>Color Theory</h2>\n      <p>Understanding color relationships is crucial for creating <span class=\"highlight\">visually appealing</span> designs that users love.</p>\n      <div class=\"color-palette\">\n        <div class=\"color-swatch\" style=\"background: var(--primary-color);\">Primary</div>\n        <div class=\"color-swatch\" style=\"background: var(--secondary-color);\">Secondary</div>\n        <div class=\"color-swatch\" style=\"background: var(--accent-color);\">Accent</div>\n      </div>\n    </article>\n    \n    <article class=\"card\">\n      <h2>Typography Hierarchy</h2>\n      <p>Good typography creates clear information hierarchy and improves readability. Use different font weights, sizes, and families to guide the user's eye.</p>\n      <p style=\"font-weight: 300; font-style: italic;\">Light italic text for subtle information</p>\n      <p style=\"font-weight: 600; text-transform: uppercase; letter-spacing: 1px;\">Bold uppercase for emphasis</p>\n    </article>\n    \n    <article class=\"card\">\n      <h2>Responsive Design</h2>\n      <p>Modern websites must work beautifully on all devices. Use fluid typography and flexible layouts to create inclusive experiences.</p>\n      <p>This text will adapt to different screen sizes using modern CSS techniques like clamp() and media queries.</p>\n    </article>\n  </main>\n</body>\n</html>",
      "hints": [
        "Use CSS custom properties for consistent theming",
        "Implement Google Fonts for professional typography",
        "Apply clamp() for fluid typography",
        "Create accessible color contrasts",
        "Use CSS Grid for responsive layouts",
        "Add hover effects and transitions",
        "Implement proper responsive breakpoints"
      ]
    },
    "nextLesson": "css-layout"
  },
  {
    "id": "css-layout",
    "title": "CSS Layout Basics",
    "category": "CSS",
    "difficulty": "Beginner",
    "duration": "40 minutes",
    "summary": "Master modern CSS layout techniques including Flexbox, Grid, and responsive design.",
    "description": "Learn advanced CSS layout methods to create professional, responsive web designs. Master Flexbox, CSS Grid, positioning, and modern layout techniques.",
    "slides": [
      {
        "id": 1,
        "title": "CSS Layout Evolution",
        "content": "<h2>CSS Layout Evolution</h2><p>CSS layout methods have evolved significantly:</p><ul><li><strong>Float-based layouts:</strong> Legacy method using float property</li><li><strong>Flexbox:</strong> One-dimensional layout system</li><li><strong>CSS Grid:</strong> Two-dimensional layout system</li><li><strong>Modern approaches:</strong> Combining Grid and Flexbox</li></ul><p>Modern CSS provides powerful tools for complex layouts.</p>",
        "type": "content"
      },
      {
        "id": 2,
        "title": "Advanced Box Model",
        "content": "<h2>Advanced Box Model</h2><p>Beyond basic spacing, the box model includes:</p><ul><li><strong>box-sizing:</strong> border-box vs content-box</li><li><strong>margin collapsing:</strong> Adjacent margins combine</li><li><strong>negative margins:</strong> For special layout effects</li><li><strong>calc():</strong> Mathematical expressions in CSS</li></ul><div class='code-example'><code>width: calc(100% - 2rem);</code></div>",
        "type": "content"
      },
      {
        "id": 3,
        "title": "CSS Positioning Deep Dive",
        "content": "<h2>CSS Positioning Deep Dive</h2><ul><li><strong>static:</strong> Default positioning</li><li><strong>relative:</strong> Position relative to normal flow</li><li><strong>absolute:</strong> Position relative to nearest positioned ancestor</li><li><strong>fixed:</strong> Position relative to viewport</li><li><strong>sticky:</strong> Hybrid of relative and fixed</li></ul><p>Understanding positioning context is crucial for complex layouts.</p>",
        "type": "content"
      },
      {
        "id": 4,
        "title": "Flexbox Fundamentals",
        "content": "<h2>Flexbox Fundamentals</h2><p>Flexbox creates flexible, responsive layouts:</p><div class='code-example'><code>.container {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n}</code></div><ul><li><strong>Main axis:</strong> justify-content controls alignment</li><li><strong>Cross axis:</strong> align-items controls alignment</li><li><strong>Flex items:</strong> Can grow, shrink, and have basis</li></ul>",
        "type": "content"
      },
      {
        "id": 5,
        "title": "Advanced Flexbox",
        "content": "<h2>Advanced Flexbox</h2><ul><li><strong>flex-direction:</strong> row, column, row-reverse, column-reverse</li><li><strong>flex-wrap:</strong> Control wrapping behavior</li><li><strong>align-content:</strong> Multi-line alignment</li><li><strong>order:</strong> Change visual order of items</li><li><strong>flex-grow/shrink/basis:</strong> Control item sizing</li></ul><p>Flexbox is perfect for navigation bars, card layouts, and responsive components.</p>",
        "type": "content"
      },
      {
        "id": 6,
        "title": "CSS Grid Basics",
        "content": "<h2>CSS Grid Basics</h2><p>CSS Grid creates two-dimensional layouts:</p><div class='code-example'><code>.grid {\n  display: grid;\n  grid-template-columns: 1fr 2fr 1fr;\n  grid-template-rows: auto;\n  gap: 1rem;\n}</code></div><p>Grid lines, tracks, cells, and areas provide precise control over layout.</p>",
        "type": "content"
      },
      {
        "id": 7,
        "title": "CSS Grid Advanced",
        "content": "<h2>CSS Grid Advanced</h2><ul><li><strong>grid-template-areas:</strong> Named grid areas</li><li><strong>grid-auto-flow:</strong> Auto-placement algorithm</li><li><strong>minmax():</strong> Flexible track sizing</li><li><strong>repeat():</strong> Repeating track patterns</li><li><strong>fr unit:</strong> Fraction-based sizing</li></ul><div class='code-example'><code>grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));</code></div>",
        "type": "content"
      },
      {
        "id": 8,
        "title": "Responsive Layout Patterns",
        "content": "<h2>Responsive Layout Patterns</h2><ul><li><strong>Mobile-first:</strong> Design for small screens first</li><li><strong>Breakpoint strategy:</strong> Key screen sizes (576px, 768px, 992px, 1200px)</li><li><strong>Container queries:</strong> Size-based component styling</li><li><strong>Fluid layouts:</strong> Percentage and viewport units</li></ul><p>Modern responsive design uses Grid and Flexbox with media queries.</p>",
        "type": "content"
      },
      {
        "id": 9,
        "title": "Modern Layout Techniques",
        "content": "<h2>Modern Layout Techniques</h2><ul><li><strong>CSS Subgrid:</strong> Nested grids inherit parent tracks</li><li><strong>Container queries:</strong> Component-based responsive design</li><li><strong>Logical properties:</strong> margin-inline, padding-block</li><li><strong>Aspect ratios:</strong> aspect-ratio property</li><li><strong>Masonry layouts:</strong> Pinterest-style grids</li></ul><p>Stay updated with the latest CSS layout features.</p>",
        "type": "content"
      }
    ],
    "learningObjectives": [
      "Master CSS Grid and Flexbox layout systems",
      "Apply advanced positioning techniques",
      "Create responsive layouts with modern CSS",
      "Use calc() and other CSS functions for dynamic layouts",
      "Implement mobile-first responsive design",
      "Combine multiple layout methods effectively"
    ],
    "exercise": {
      "description": "Create a modern, responsive website layout using CSS Grid and Flexbox with advanced positioning techniques.",
      "starter": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <title>Modern CSS Layout</title>\n  <style>\n    :root {\n      --primary: #2563eb;\n      --secondary: #64748b;\n      --light: #f8fafc;\n      --dark: #1e293b;\n      --shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);\n      --border-radius: 8px;\n    }\n    \n    * {\n      margin: 0;\n      padding: 0;\n      box-sizing: border-box;\n    }\n    \n    body {\n      font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;\n      line-height: 1.6;\n      color: var(--dark);\n      background: var(--light);\n    }\n    \n    /* Header with Flexbox */\n    .header {\n      background: white;\n      box-shadow: var(--shadow);\n      position: sticky;\n      top: 0;\n      z-index: 100;\n    }\n    \n    .header-content {\n      max-width: 1200px;\n      margin: 0 auto;\n      padding: 1rem 2rem;\n      display: flex;\n      justify-content: space-between;\n      align-items: center;\n    }\n    \n    .logo {\n      font-size: 1.5rem;\n      font-weight: 700;\n      color: var(--primary);\n    }\n    \n    .nav {\n      display: flex;\n      gap: 2rem;\n      align-items: center;\n    }\n    \n    .nav-link {\n      color: var(--secondary);\n      text-decoration: none;\n      font-weight: 500;\n      transition: color 0.3s ease;\n    }\n    \n    .nav-link:hover {\n      color: var(--primary);\n    }\n    \n    /* Hero Section */\n    .hero {\n      background: linear-gradient(135deg, var(--primary), #1d4ed8);\n      color: white;\n      padding: 4rem 2rem;\n      text-align: center;\n    }\n    \n    .hero-content {\n      max-width: 800px;\n      margin: 0 auto;\n    }\n    \n    .hero h1 {\n      font-size: clamp(2rem, 5vw, 3.5rem);\n      margin-bottom: 1rem;\n      font-weight: 700;\n    }\n    \n    .hero p {\n      font-size: 1.2rem;\n      opacity: 0.9;\n      margin-bottom: 2rem;\n    }\n    \n    .cta-button {\n      background: white;\n      color: var(--primary);\n      padding: 1rem 2rem;\n      border-radius: var(--border-radius);\n      text-decoration: none;\n      font-weight: 600;\n      display: inline-block;\n      transition: transform 0.3s ease;\n    }\n    \n    .cta-button:hover {\n      transform: translateY(-2px);\n    }\n    \n    /* Main Content - CSS Grid */\n    .main-content {\n      max-width: 1200px;\n      margin: 0 auto;\n      padding: 4rem 2rem;\n    }\n    \n    .features-grid {\n      display: grid;\n      grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));\n      gap: 2rem;\n      margin-bottom: 4rem;\n    }\n    \n    .feature-card {\n      background: white;\n      padding: 2rem;\n      border-radius: var(--border-radius);\n      box-shadow: var(--shadow);\n      transition: transform 0.3s ease, box-shadow 0.3s ease;\n    }\n    \n    .feature-card:hover {\n      transform: translateY(-5px);\n      box-shadow: 0 10px 25px rgba(0, 0, 0, 0.15);\n    }\n    \n    .feature-icon {\n      width: 60px;\n      height: 60px;\n      background: var(--primary);\n      border-radius: 50%;\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      color: white;\n      font-size: 1.5rem;\n      margin-bottom: 1rem;\n    }\n    \n    .feature-card h3 {\n      margin-bottom: 1rem;\n      color: var(--dark);\n    }\n    \n    /* Layout Demo Section */\n    .layout-demo {\n      background: white;\n      border-radius: var(--border-radius);\n      padding: 2rem;\n      margin-bottom: 2rem;\n      box-shadow: var(--shadow);\n    }\n    \n    .demo-grid {\n      display: grid;\n      grid-template-columns: 200px 1fr 200px;\n      grid-template-rows: 100px 1fr 100px;\n      gap: 1rem;\n      height: 300px;\n      margin: 2rem 0;\n      border: 2px dashed #e2e8f0;\n      border-radius: var(--border-radius);\n    }\n    \n    .grid-item {\n      background: var(--primary);\n      color: white;\n      padding: 1rem;\n      border-radius: var(--border-radius);\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      font-weight: 600;\n    }\n    \n    .grid-header { grid-column: 1 / -1; background: #059669; }\n    .grid-sidebar { grid-row: 2 / 3; background: #dc2626; }\n    .grid-main { background: var(--primary); }\n    .grid-footer { grid-column: 1 / -1; background: #7c3aed; }\n    \n    /* Flexbox Demo */\n    .flex-demo {\n      display: flex;\n      gap: 1rem;\n      margin: 2rem 0;\n      padding: 1rem;\n      background: #f1f5f9;\n      border-radius: var(--border-radius);\n      flex-wrap: wrap;\n    }\n    \n    .flex-item {\n      background: var(--secondary);\n      color: white;\n      padding: 1rem;\n      border-radius: var(--border-radius);\n      flex: 1 1 200px;\n      text-align: center;\n    }\n    \n    /* Footer */\n    .footer {\n      background: var(--dark);\n      color: white;\n      padding: 2rem;\n      text-align: center;\n    }\n    \n    .footer-content {\n      max-width: 1200px;\n      margin: 0 auto;\n      display: grid;\n      grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));\n      gap: 2rem;\n      text-align: left;\n    }\n    \n    .footer-section h4 {\n      margin-bottom: 1rem;\n      color: #e2e8f0;\n    }\n    \n    .footer-section ul {\n      list-style: none;\n    }\n    \n    .footer-section a {\n      color: #cbd5e1;\n      text-decoration: none;\n      display: block;\n      margin-bottom: 0.5rem;\n      transition: color 0.3s ease;\n    }\n    \n    .footer-section a:hover {\n      color: white;\n    }\n    \n    /* Responsive Design */\n    @media (max-width: 768px) {\n      .header-content {\n        flex-direction: column;\n        gap: 1rem;\n      }\n      \n      .nav {\n        flex-wrap: wrap;\n        justify-content: center;\n      }\n      \n      .hero {\n        padding: 2rem 1rem;\n      }\n      \n      .main-content {\n        padding: 2rem 1rem;\n      }\n      \n      .features-grid {\n        grid-template-columns: 1fr;\n      }\n      \n      .footer-content {\n        grid-template-columns: 1fr;\n        text-align: center;\n      }\n      \n      .demo-grid {\n        grid-template-columns: 1fr;\n        grid-template-rows: auto;\n        height: auto;\n      }\n    }\n  </style>\n</head>\n<body>\n  <header class=\"header\">\n    <div class=\"header-content\">\n      <div class=\"logo\">ModernLayout</div>\n      <nav class=\"nav\">\n        <a href=\"#\" class=\"nav-link\">Home</a>\n        <a href=\"#\" class=\"nav-link\">Features</a>\n        <a href=\"#\" class=\"nav-link\">About</a>\n        <a href=\"#\" class=\"nav-link\">Contact</a>\n      </nav>\n    </div>\n  </header>\n  \n  <section class=\"hero\">\n    <div class=\"hero-content\">\n      <h1>Modern CSS Layout</h1>\n      <p>Master Flexbox, Grid, and responsive design techniques</p>\n      <a href=\"#features\" class=\"cta-button\">Explore Features</a>\n    </div>\n  </section>\n  \n  <main class=\"main-content\" id=\"features\">\n    <section class=\"features-grid\">\n      <article class=\"feature-card\">\n        <div class=\"feature-icon\">🎯</div>\n        <h3>CSS Grid</h3>\n        <p>Two-dimensional layout system for complex designs. Perfect for overall page structure and component layouts.</p>\n      </article>\n      \n      <article class=\"feature-card\">\n        <div class=\"feature-icon\">📱</div>\n        <h3>Flexbox</h3>\n        <p>One-dimensional layout method for flexible component design. Ideal for navigation, cards, and responsive elements.</p>\n      </article>\n      \n      <article class=\"feature-card\">\n        <div class=\"feature-icon\">🎨</div>\n        <h3>Responsive Design</h3>\n        <p>Create websites that work beautifully on all devices using modern CSS techniques and media queries.</p>\n      </article>\n    </section>\n    \n    <section class=\"layout-demo\">\n      <h2>CSS Grid Demo</h2>\n      <p>This layout uses CSS Grid with named areas:</p>\n      <div class=\"demo-grid\">\n        <div class=\"grid-item grid-header\">Header</div>\n        <div class=\"grid-item grid-sidebar\">Sidebar</div>\n        <div class=\"grid-item grid-main\">Main Content</div>\n        <div class=\"grid-item grid-footer\">Footer</div>\n      </div>\n    </section>\n    \n    <section class=\"layout-demo\">\n      <h2>Flexbox Demo</h2>\n      <p>Flexbox creates flexible, responsive layouts:</p>\n      <div class=\"flex-demo\">\n        <div class=\"flex-item\">Item 1</div>\n        <div class=\"flex-item\">Item 2</div>\n        <div class=\"flex-item\">Item 3</div>\n        <div class=\"flex-item\">Item 4</div>\n      </div>\n    </section>\n  </main>\n  \n  <footer class=\"footer\">\n    <div class=\"footer-content\">\n      <div class=\"footer-section\">\n        <h4>ModernLayout</h4>\n        <p>Creating beautiful, responsive web layouts with modern CSS techniques.</p>\n      </div>\n      <div class=\"footer-section\">\n        <h4>Quick Links</h4>\n        <ul>\n          <li><a href=\"#\">Home</a></li>\n          <li><a href=\"#\">Features</a></li>\n          <li><a href=\"#\">Documentation</a></li>\n          <li><a href=\"#\">Support</a></li>\n        </ul>\n      </div>\n      <div class=\"footer-section\">\n        <h4>Resources</h4>\n        <ul>\n          <li><a href=\"#\">CSS Grid Guide</a></li>\n          <li><a href=\"#\">Flexbox Tutorial</a></li>\n          <li><a href=\"#\">Responsive Design</a></li>\n          <li><a href=\"#\">Best Practices</a></li>\n        </ul>\n      </div>\n    </div>\n  </footer>\n</body>\n</html>",
      "hints": [
        "Use CSS Grid for overall page layout structure",
        "Apply Flexbox for component-level layouts like navigation",
        "Implement responsive design with media queries",
        "Use CSS custom properties for consistent theming",
        "Apply modern layout techniques like sticky positioning",
        "Create fluid typography with clamp()",
        "Use semantic HTML elements for better accessibility",
        "Implement hover effects and smooth transitions",
        "Design mobile-first responsive layouts",
        "Combine Grid and Flexbox for complex layouts"
      ]
    },
    "nextLesson": "javascript-intro"
  },
  {
    "id": "javascript-intro",
    "title": "JavaScript Introduction",
    "category": "JavaScript",
    "difficulty": "Beginner",
    "duration": "45 minutes",
    "summary": "Master JavaScript fundamentals, DOM manipulation, and interactive programming.",
    "description": "JavaScript is the programming language that powers modern web applications. Learn about variables, functions, events, DOM manipulation, and how to create dynamic, interactive web experiences.",
    "slides": [
      {
        "id": 1,
        "title": "What is JavaScript?",
        "content": "<h2>What is JavaScript?</h2><p>JavaScript is a high-level, interpreted programming language that adds interactivity to web pages.</p><p>Key characteristics:</p><ul><li><strong>Client-side:</strong> Runs in the browser</li><li><strong>Dynamic:</strong> Can change HTML and CSS</li><li><strong>Event-driven:</strong> Responds to user actions</li><li><strong>Versatile:</strong> Used for web, mobile, server, and desktop apps</li></ul>",
        "type": "content"
      },
      {
        "id": 2,
        "title": "JavaScript in Web Development",
        "content": "<h2>JavaScript in Web Development</h2><p>JavaScript works with HTML and CSS to create dynamic websites:</p><ul><li><strong>HTML:</strong> Structure and content</li><li><strong>CSS:</strong> Presentation and styling</li><li><strong>JavaScript:</strong> Behavior and interactivity</li></ul><p>Together they form the three pillars of modern web development.</p>",
        "type": "content"
      },
      {
        "id": 3,
        "title": "JavaScript Syntax Basics",
        "content": "<h2>JavaScript Syntax Basics</h2><ul><li><strong>Statements:</strong> End with semicolons</li><li><strong>Case-sensitive:</strong> myVar ≠ MyVar</li><li><strong>Comments:</strong> // single line, /* */ multi-line</li><li><strong>Variables:</strong> let, const, var (deprecated)</li><li><strong>Functions:</strong> function name() { ... }</li></ul><div class='code-example'><code>// This is a comment\nlet message = 'Hello World!';\nconsole.log(message);</code></div>",
        "type": "content"
      },
      {
        "id": 4,
        "title": "Data Types and Variables",
        "content": "<h2>Data Types and Variables</h2><p>JavaScript has dynamic typing:</p><ul><li><strong>Primitive:</strong> string, number, boolean, undefined, null, symbol, bigint</li><li><strong>Objects:</strong> arrays, functions, objects</li><li><strong>Variables:</strong> let (block scope), const (immutable), var (function scope)</li></ul><div class='code-example'><code>let name = 'John'; // string\nconst age = 25; // number\nvar isStudent = true; // boolean</code></div>",
        "type": "content"
      },
      {
        "id": 5,
        "title": "Operators and Expressions",
        "content": "<h2>Operators and Expressions</h2><ul><li><strong>Arithmetic:</strong> +, -, *, /, %, **</li><li><strong>Comparison:</strong> ==, ===, !=, !==, <, >, <=, >=</li><li><strong>Logical:</strong> &&, ||, !</li><li><strong>Assignment:</strong> =, +=, -=, *=, /=</li><li><strong>Ternary:</strong> condition ? true : false</li></ul><div class='code-example'><code>let result = (age >= 18) ? 'Adult' : 'Minor';</code></div>",
        "type": "content"
      },
      {
        "id": 6,
        "title": "Control Flow",
        "content": "<h2>Control Flow</h2><p>Control the execution flow of your program:</p><ul><li><strong>if/else:</strong> Conditional execution</li><li><strong>switch:</strong> Multiple condition checking</li><li><strong>for/while:</strong> Loops for repetition</li><li><strong>try/catch:</strong> Error handling</li></ul><div class='code-example'><code>if (score >= 90) {\n  grade = 'A';\n} else if (score >= 80) {\n  grade = 'B';\n} else {\n  grade = 'C';\n}</code></div>",
        "type": "content"
      },
      {
        "id": 7,
        "title": "Functions",
        "content": "<h2>Functions</h2><p>Functions are reusable blocks of code:</p><ul><li><strong>Function declarations:</strong> function name() { ... }</li><li><strong>Function expressions:</strong> const name = function() { ... }</li><li><strong>Arrow functions:</strong> const name = () => { ... }</li><li><strong>Parameters:</strong> Input values</li><li><strong>Return:</strong> Output values</li></ul><div class='code-example'><code>function greet(name) {\n  return `Hello, ${name}!`;\n}\n\nconst greeting = greet('World');</code></div>",
        "type": "content"
      },
      {
        "id": 8,
        "title": "DOM Manipulation",
        "content": "<h2>DOM Manipulation</h2><p>The DOM (Document Object Model) represents the HTML structure:</p><ul><li><strong>Selecting elements:</strong> getElementById, querySelector</li><li><strong>Changing content:</strong> innerHTML, textContent</li><li><strong>Modifying styles:</strong> style property</li><li><strong>Event handling:</strong> addEventListener</li></ul><div class='code-example'><code>const element = document.getElementById('myDiv');\nelement.innerHTML = 'New content';\nelement.style.color = 'red';</code></div>",
        "type": "content"
      },
      {
        "id": 9,
        "title": "Events and Interactivity",
        "content": "<h2>Events and Interactivity</h2><p>Make your pages respond to user actions:</p><ul><li><strong>Click events:</strong> button.onclick</li><li><strong>Form events:</strong> submit, input, change</li><li><strong>Mouse events:</strong> mouseover, mouseout</li><li><strong>Keyboard events:</strong> keydown, keyup</li><li><strong>Window events:</strong> load, resize, scroll</li></ul><div class='code-example'><code>button.addEventListener('click', function() {\n  alert('Button clicked!');\n});</code></div>",
        "type": "content"
      },
      {
        "id": 10,
        "title": "JavaScript Best Practices",
        "content": "<h2>JavaScript Best Practices</h2><ul><li>Use const and let instead of var</li><li>Use descriptive variable and function names</li><li>Add comments for complex logic</li><li>Use modern ES6+ features when possible</li><li>Handle errors with try/catch</li><li>Avoid global variables</li><li>Use consistent code formatting</li></ul>",
        "type": "content"
      }
    ],
    "learningObjectives": [
      "Understand JavaScript's role in web development",
      "Master basic syntax and programming concepts",
      "Work with variables, data types, and operators",
      "Create and use functions effectively",
      "Manipulate the DOM to change page content",
      "Handle events to create interactive experiences",
      "Follow JavaScript best practices"
    ],
    "exercise": {
      "description": "Create an interactive JavaScript application with multiple features including DOM manipulation, event handling, and dynamic content updates.",
      "starter": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <title>JavaScript Interactive App</title>\n  <style>\n    :root {\n      --primary: #3498db;\n      --secondary: #2ecc71;\n      --danger: #e74c3c;\n      --warning: #f39c12;\n      --light: #ecf0f1;\n      --dark: #2c3e50;\n      --shadow: 0 2px 10px rgba(0,0,0,0.1);\n    }\n    \n    * {\n      margin: 0;\n      padding: 0;\n      box-sizing: border-box;\n    }\n    \n    body {\n      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n      line-height: 1.6;\n      color: var(--dark);\n      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n      min-height: 100vh;\n      padding: 20px;\n    }\n    \n    .container {\n      max-width: 800px;\n      margin: 0 auto;\n      background: white;\n      border-radius: 12px;\n      box-shadow: var(--shadow);\n      overflow: hidden;\n    }\n    \n    .header {\n      background: var(--primary);\n      color: white;\n      padding: 2rem;\n      text-align: center;\n    }\n    \n    .header h1 {\n      font-size: 2.5rem;\n      margin-bottom: 0.5rem;\n    }\n    \n    .header p {\n      opacity: 0.9;\n      font-size: 1.1rem;\n    }\n    \n    .content {\n      padding: 2rem;\n    }\n    \n    .demo-section {\n      margin-bottom: 2rem;\n      padding: 1.5rem;\n      border: 1px solid #e1e8ed;\n      border-radius: 8px;\n      background: #f8f9fa;\n    }\n    \n    .demo-section h3 {\n      color: var(--primary);\n      margin-bottom: 1rem;\n      font-size: 1.3rem;\n    }\n    \n    .controls {\n      display: flex;\n      gap: 1rem;\n      flex-wrap: wrap;\n      margin-bottom: 1rem;\n    }\n    \n    button {\n      background: var(--primary);\n      color: white;\n      border: none;\n      padding: 0.75rem 1.5rem;\n      border-radius: 6px;\n      cursor: pointer;\n      font-size: 1rem;\n      font-weight: 500;\n      transition: all 0.3s ease;\n    }\n    \n    button:hover {\n      background: #2980b9;\n      transform: translateY(-2px);\n      box-shadow: 0 4px 12px rgba(52, 152, 219, 0.3);\n    }\n    \n    button.secondary {\n      background: var(--secondary);\n    }\n    \n    button.secondary:hover {\n      background: #27ae60;\n      box-shadow: 0 4px 12px rgba(46, 204, 113, 0.3);\n    }\n    \n    button.danger {\n      background: var(--danger);\n    }\n    \n    button.danger:hover {\n      background: #c0392b;\n      box-shadow: 0 4px 12px rgba(231, 76, 60, 0.3);\n    }\n    \n    .output {\n      margin-top: 1rem;\n      padding: 1rem;\n      background: white;\n      border: 1px solid #e1e8ed;\n      border-radius: 6px;\n      min-height: 50px;\n      font-family: 'Courier New', monospace;\n    }\n    \n    .counter-display {\n      font-size: 2rem;\n      font-weight: bold;\n      color: var(--primary);\n      text-align: center;\n      margin: 1rem 0;\n    }\n    \n    .color-box {\n      width: 100px;\n      height: 100px;\n      border-radius: 8px;\n      margin: 1rem auto;\n      display: block;\n      transition: all 0.3s ease;\n    }\n    \n    .todo-list {\n      margin-top: 1rem;\n    }\n    \n    .todo-item {\n      display: flex;\n      align-items: center;\n      gap: 0.5rem;\n      padding: 0.5rem;\n      background: white;\n      border: 1px solid #e1e8ed;\n      border-radius: 4px;\n      margin-bottom: 0.5rem;\n    }\n    \n    .todo-item.completed {\n      text-decoration: line-through;\n      opacity: 0.6;\n    }\n    \n    .todo-checkbox {\n      width: 18px;\n      height: 18px;\n    }\n    \n    .input-group {\n      display: flex;\n      gap: 0.5rem;\n      margin-bottom: 1rem;\n    }\n    \n    input, textarea {\n      padding: 0.5rem;\n      border: 1px solid #ddd;\n      border-radius: 4px;\n      font-size: 1rem;\n    }\n    \n    input:focus, textarea:focus {\n      outline: none;\n      border-color: var(--primary);\n      box-shadow: 0 0 0 2px rgba(52, 152, 219, 0.2);\n    }\n    \n    .weather-card {\n      background: linear-gradient(135deg, #74b9ff 0%, #0984e3 100%);\n      color: white;\n      padding: 1.5rem;\n      border-radius: 8px;\n      text-align: center;\n      margin: 1rem 0;\n    }\n    \n    .weather-temp {\n      font-size: 3rem;\n      font-weight: bold;\n      margin: 0.5rem 0;\n    }\n    \n    .weather-condition {\n      font-size: 1.2rem;\n      opacity: 0.9;\n    }\n    \n    @media (max-width: 768px) {\n      .controls {\n        flex-direction: column;\n      }\n      \n      button {\n        width: 100%;\n      }\n      \n      .header h1 {\n        font-size: 2rem;\n      }\n    }\n  </style>\n</head>\n<body>\n  <div class=\"container\">\n    <header class=\"header\">\n      <h1>JavaScript Interactive Demo</h1>\n      <p>Explore JavaScript fundamentals through interactive examples</p>\n    </header>\n    \n    <main class=\"content\">\n      <!-- Counter Demo -->\n      <section class=\"demo-section\">\n        <h3>Counter Application</h3>\n        <p>Demonstrates variables, functions, and DOM manipulation</p>\n        <div class=\"counter-display\" id=\"counter\">0</div>\n        <div class=\"controls\">\n          <button onclick=\"incrementCounter()\">Increment</button>\n          <button onclick=\"decrementCounter()\" class=\"secondary\">Decrement</button>\n          <button onclick=\"resetCounter()\" class=\"danger\">Reset</button>\n        </div>\n      </section>\n      \n      <!-- Color Changer Demo -->\n      <section class=\"demo-section\">\n        <h3>Color Changer</h3>\n        <p>Shows random color generation and style manipulation</p>\n        <div class=\"color-box\" id=\"colorBox\" style=\"background: #3498db;\"></div>\n        <div class=\"controls\">\n          <button onclick=\"changeColor()\">Change Color</button>\n          <button onclick=\"resetColor()\" class=\"secondary\">Reset</button>\n        </div>\n        <div class=\"output\" id=\"colorOutput\">Current color: #3498db</div>\n      </section>\n      \n      <!-- Todo List Demo -->\n      <section class=\"demo-section\">\n        <h3>Todo List</h3>\n        <p>Interactive todo list with add/remove functionality</p>\n        <div class=\"input-group\">\n          <input type=\"text\" id=\"todoInput\" placeholder=\"Enter a new todo...\" onkeypress=\"handleKeyPress(event)\">\n          <button onclick=\"addTodo()\">Add Todo</button>\n        </div>\n        <div id=\"todoList\" class=\"todo-list\">\n          <!-- Todos will be added here -->\n        </div>\n      </section>\n      \n      <!-- Weather Demo -->\n      <section class=\"demo-section\">\n        <h3>Weather Simulator</h3>\n        <p>Demonstrates conditional logic and dynamic content</p>\n        <div class=\"controls\">\n          <button onclick=\"generateWeather()\">Get Weather</button>\n        </div>\n        <div id=\"weatherDisplay\" class=\"output\">\n          Click \"Get Weather\" to see current conditions\n        </div>\n      </section>\n      \n      <!-- Calculator Demo -->\n      <section class=\"demo-section\">\n        <h3>Simple Calculator</h3>\n        <p>Basic arithmetic operations with input validation</p>\n        <div class=\"input-group\">\n          <input type=\"number\" id=\"num1\" placeholder=\"First number\">\n          <input type=\"number\" id=\"num2\" placeholder=\"Second number\">\n        </div>\n        <div class=\"controls\">\n          <button onclick=\"calculate('add')\">+</button>\n          <button onclick=\"calculate('subtract')\">-</button>\n          <button onclick=\"calculate('multiply')\">×</button>\n          <button onclick=\"calculate('divide')\">÷</button>\n        </div>\n        <div class=\"output\" id=\"calcResult\">Result will appear here</div>\n      </section>\n    </main>\n  </div>\n\n  <script>\n    // Counter functionality\n    let counter = 0;\n    \n    function incrementCounter() {\n      counter++;\n      updateCounterDisplay();\n    }\n    \n    function decrementCounter() {\n      counter--;\n      updateCounterDisplay();\n    }\n    \n    function resetCounter() {\n      counter = 0;\n      updateCounterDisplay();\n    }\n    \n    function updateCounterDisplay() {\n      document.getElementById('counter').textContent = counter;\n    }\n    \n    // Color changer functionality\n    function changeColor() {\n      const colors = ['#e74c3c', '#f39c12', '#2ecc71', '#9b59b6', '#3498db', '#e67e22', '#1abc9c'];\n      const randomColor = colors[Math.floor(Math.random() * colors.length)];\n      const colorBox = document.getElementById('colorBox');\n      const colorOutput = document.getElementById('colorOutput');\n      \n      colorBox.style.backgroundColor = randomColor;\n      colorOutput.textContent = `Current color: ${randomColor}`;\n    }\n    \n    function resetColor() {\n      const colorBox = document.getElementById('colorBox');\n      const colorOutput = document.getElementById('colorOutput');\n      \n      colorBox.style.backgroundColor = '#3498db';\n      colorOutput.textContent = 'Current color: #3498db';\n    }\n    \n    // Todo list functionality\n    let todoId = 0;\n    \n    function addTodo() {\n      const input = document.getElementById('todoInput');\n      const todoList = document.getElementById('todoList');\n      \n      if (input.value.trim() === '') {\n        alert('Please enter a todo item');\n        return;\n      }\n      \n      const todoItem = document.createElement('div');\n      todoItem.className = 'todo-item';\n      todoItem.innerHTML = `\n        <input type=\"checkbox\" class=\"todo-checkbox\" onchange=\"toggleTodo(this)\">\n        <span>${input.value}</span>\n        <button onclick=\"removeTodo(this)\" class=\"danger\" style=\"margin-left: auto; padding: 0.25rem 0.5rem; font-size: 0.8rem;\">Remove</button>\n      `;\n      \n      todoList.appendChild(todoItem);\n      input.value = '';\n    }\n    \n    function handleKeyPress(event) {\n      if (event.key === 'Enter') {\n        addTodo();\n      }\n    }\n    \n    function toggleTodo(checkbox) {\n      const todoItem = checkbox.parentElement;\n      if (checkbox.checked) {\n        todoItem.classList.add('completed');\n      } else {\n        todoItem.classList.remove('completed');\n      }\n    }\n    \n    function removeTodo(button) {\n      button.parentElement.remove();\n    }\n    \n    // Weather simulator\n    function generateWeather() {\n      const conditions = ['Sunny', 'Cloudy', 'Rainy', 'Snowy', 'Windy'];\n      const temperatures = [72, 68, 65, 45, 78, 82, 55];\n      \n      const randomCondition = conditions[Math.floor(Math.random() * conditions.length)];\n      const randomTemp = temperatures[Math.floor(Math.random() * temperatures.length)];\n      \n      const weatherDisplay = document.getElementById('weatherDisplay');\n      \n      weatherDisplay.innerHTML = `\n        <div class=\"weather-card\">\n          <div class=\"weather-condition\">${randomCondition}</div>\n          <div class=\"weather-temp\">${randomTemp}°F</div>\n          <div>Feels like ${randomTemp + Math.floor(Math.random() * 10 - 5)}°F</div>\n        </div>\n      `;\n    }\n    \n    // Calculator functionality\n    function calculate(operation) {\n      const num1 = parseFloat(document.getElementById('num1').value);\n      const num2 = parseFloat(document.getElementById('num2').value);\n      const resultDiv = document.getElementById('calcResult');\n      \n      if (isNaN(num1) || isNaN(num2)) {\n        resultDiv.textContent = 'Please enter valid numbers';\n        return;\n      }\n      \n      let result;\n      let operationSymbol;\n      \n      switch(operation) {\n        case 'add':\n          result = num1 + num2;\n          operationSymbol = '+';\n          break;\n        case 'subtract':\n          result = num1 - num2;\n          operationSymbol = '-';\n          break;\n        case 'multiply':\n          result = num1 * num2;\n          operationSymbol = '×';\n          break;\n        case 'divide':\n          if (num2 === 0) {\n            resultDiv.textContent = 'Cannot divide by zero';\n            return;\n          }\n          result = num1 / num2;\n          operationSymbol = '÷';\n          break;\n      }\n      \n      resultDiv.textContent = `${num1} ${operationSymbol} ${num2} = ${result}`;\n    }\n    \n    // Initialize the app\n    document.addEventListener('DOMContentLoaded', function() {\n      console.log('JavaScript Interactive Demo loaded successfully!');\n    });\n  </script>\n</body>\n</html>",
      "hints": [
        "Use let and const for variable declarations",
        "Create reusable functions for common operations",
        "Use addEventListener for better event handling",
        "Practice DOM manipulation with getElementById and querySelector",
        "Implement proper error handling and input validation",
        "Use modern JavaScript features like template literals",
        "Organize code with comments and logical structure",
        "Create interactive user interfaces with event listeners",
        "Use arrays and objects to store and manipulate data",
        "Implement conditional logic for dynamic behavior"
      ]
    },
    "nextLesson": "javascript-variables"
  },
  {
    "id": "javascript-variables",
    "title": "Variables and Data Types",
    "category": "JavaScript",
    "difficulty": "Beginner",
    "duration": "40 minutes",
    "summary": "Master JavaScript variables, data types, and advanced data structures.",
    "description": "Deep dive into JavaScript variables, primitive and reference types, arrays, objects, and modern ES6+ features for data manipulation.",
    "slides": [
      {
        "id": 1,
        "title": "Variable Declaration and Scope",
        "content": "<h2>Variable Declaration and Scope</h2><p>JavaScript has three ways to declare variables:</p><ul><li><strong>var:</strong> Function scope, can be redeclared</li><li><strong>let:</strong> Block scope, cannot be redeclared in same scope</li><li><strong>const:</strong> Block scope, cannot be reassigned</li></ul><div class='code-example'><code>var globalVar = 'global'; // Avoid using var\nlet blockVar = 'block'; // Preferred\nconst constant = 'immutable'; // For constants</code></div>",
        "type": "content"
      },
      {
        "id": 2,
        "title": "Primitive Data Types",
        "content": "<h2>Primitive Data Types</h2><p>JavaScript has 7 primitive data types:</p><ul><li><strong>string:</strong> Text data ('Hello', \"World\")</li><li><strong>number:</strong> Numeric values (42, 3.14, NaN, Infinity)</li><li><strong>boolean:</strong> Logical values (true, false)</li><li><strong>undefined:</strong> Uninitialized variables</li><li><strong>null:</strong> Intentional absence of value</li><li><strong>symbol:</strong> Unique identifiers (ES6+)</li><li><strong>bigint:</strong> Large integers (ES2020+)</li></ul>",
        "type": "content"
      },
      {
        "id": 3,
        "title": "Type Coercion and Conversion",
        "content": "<h2>Type Coercion and Conversion</h2><p>JavaScript automatically converts types:</p><ul><li><strong>Implicit coercion:</strong> Automatic conversion</li><li><strong>Explicit conversion:</strong> Manual conversion with functions</li></ul><div class='code-example'><code>// Implicit coercion\nconsole.log('5' + 3); // '53'\nconsole.log('5' - 3); // 2\n\n// Explicit conversion\nNumber('42'); // 42\nString(42); // '42'\nBoolean(0); // false</code></div>",
        "type": "content"
      },
      {
        "id": 4,
        "title": "Arrays - Ordered Collections",
        "content": "<h2>Arrays - Ordered Collections</h2><p>Arrays store multiple values in ordered lists:</p><div class='code-example'><code>let fruits = ['apple', 'banana', 'orange'];\nfruits.push('grape'); // Add to end\nfruits.pop(); // Remove from end\nfruits[0]; // Access first element\nfruits.length; // Get array length</code></div><p>Arrays are zero-indexed and dynamic in size.</p>",
        "type": "content"
      },
      {
        "id": 5,
        "title": "Array Methods",
        "content": "<h2>Array Methods</h2><ul><li><strong>Mutating:</strong> push, pop, shift, unshift, splice, sort, reverse</li><li><strong>Non-mutating:</strong> slice, concat, includes, indexOf, join</li><li><strong>Iterative:</strong> forEach, map, filter, reduce, find</li></ul><div class='code-example'><code>let numbers = [1, 2, 3, 4, 5];\nlet doubled = numbers.map(n => n * 2); // [2, 4, 6, 8, 10]\nlet evens = numbers.filter(n => n % 2 === 0); // [2, 4]</code></div>",
        "type": "content"
      },
      {
        "id": 6,
        "title": "Objects - Key-Value Pairs",
        "content": "<h2>Objects - Key-Value Pairs</h2><p>Objects store data as key-value pairs:</p><div class='code-example'><code>let person = {\n  name: 'John',\n  age: 30,\n  hobbies: ['reading', 'coding'],\n  greet: function() {\n    return `Hello, I'm ${this.name}`;\n  }\n};\n\nperson.name; // 'John'\nperson['age']; // 30</code></div><p>Objects can contain any data type including functions.</p>",
        "type": "content"
      },
      {
        "id": 7,
        "title": "Object Methods and Properties",
        "content": "<h2>Object Methods and Properties</h2><ul><li><strong>Object.keys():</strong> Get array of property names</li><li><strong>Object.values():</strong> Get array of property values</li><li><strong>Object.entries():</strong> Get array of [key, value] pairs</li><li><strong>hasOwnProperty():</strong> Check if property exists</li><li><strong>Object.assign():</strong> Copy/merge objects</li></ul><div class='code-example'><code>let user = {name: 'Alice', age: 25};\nObject.keys(user); // ['name', 'age']\nObject.values(user); // ['Alice', 25]</code></div>",
        "type": "content"
      },
      {
        "id": 8,
        "title": "Destructuring Assignment",
        "content": "<h2>Destructuring Assignment</h2><p>Unpack values from arrays/objects into variables:</p><div class='code-example'><code>// Array destructuring\nlet [first, second] = [1, 2, 3];\n\n// Object destructuring\nlet {name, age} = {name: 'John', age: 30};\n\n// With default values\nlet [a = 1, b = 2] = [10]; // a=10, b=2</code></div><p>Makes code more readable and concise.</p>",
        "type": "content"
      },
      {
        "id": 9,
        "title": "Template Literals and Strings",
        "content": "<h2>Template Literals and Strings</h2><p>Modern string handling with template literals:</p><div class='code-example'><code>let name = 'World';\nlet greeting = `Hello, ${name}!`; // 'Hello, World!'\n\n// Multi-line strings\nlet html = `\n  <div>\n    <h1>${title}</h1>\n  </div>\n`;</code></div><p>Template literals support interpolation and multi-line strings.</p>",
        "type": "content"
      },
      {
        "id": 10,
        "title": "Spread and Rest Operators",
        "content": "<h2>Spread and Rest Operators</h2><p>The ... operator has different uses:</p><div class='code-example'><code>// Spread operator\nlet arr1 = [1, 2, 3];\nlet arr2 = [...arr1, 4, 5]; // [1, 2, 3, 4, 5]\n\nlet obj1 = {a: 1, b: 2};\nlet obj2 = {...obj1, c: 3}; // {a: 1, b: 2, c: 3}\n\n// Rest operator\nfunction sum(...numbers) {\n  return numbers.reduce((a, b) => a + b);\n}\nsum(1, 2, 3, 4); // 10</code></div>",
        "type": "content"
      }
    ],
    "learningObjectives": [
      "Master variable declaration with let, const, and var",
      "Understand all JavaScript data types and their characteristics",
      "Work with arrays and array methods effectively",
      "Create and manipulate objects and their properties",
      "Use modern ES6+ features like destructuring and spread/rest",
      "Apply type coercion and conversion appropriately",
      "Implement template literals for string manipulation"
    ],
    "exercise": {
      "description": "Create a comprehensive JavaScript application that demonstrates variables, data types, arrays, objects, and modern ES6+ features.",
      "starter": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <title>JavaScript Data Types Masterclass</title>\n  <style>\n    :root {\n      --primary: #4f46e5;\n      --secondary: #06b6d4;\n      --success: #10b981;\n      --warning: #f59e0b;\n      --danger: #ef4444;\n      --light: #f8fafc;\n      --dark: #1e293b;\n      --border: #e2e8f0;\n      --shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);\n    }\n    \n    * {\n      margin: 0;\n      padding: 0;\n      box-sizing: border-box;\n    }\n    \n    body {\n      font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;\n      line-height: 1.6;\n      color: var(--dark);\n      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n      min-height: 100vh;\n      padding: 20px;\n    }\n    \n    .container {\n      max-width: 1000px;\n      margin: 0 auto;\n      background: white;\n      border-radius: 16px;\n      box-shadow: var(--shadow);\n      overflow: hidden;\n    }\n    \n    .header {\n      background: var(--primary);\n      color: white;\n      padding: 2rem;\n      text-align: center;\n    }\n    \n    .header h1 {\n      font-size: 2.5rem;\n      margin-bottom: 0.5rem;\n      font-weight: 700;\n    }\n    \n    .header p {\n      opacity: 0.9;\n      font-size: 1.1rem;\n    }\n    \n    .content {\n      padding: 2rem;\n    }\n    \n    .demo-section {\n      margin-bottom: 2rem;\n      padding: 1.5rem;\n      border: 1px solid var(--border);\n      border-radius: 12px;\n      background: #f8f9fa;\n    }\n    \n    .demo-section h3 {\n      color: var(--primary);\n      margin-bottom: 1rem;\n      font-size: 1.4rem;\n      display: flex;\n      align-items: center;\n      gap: 0.5rem;\n    }\n    \n    .demo-section h3::before {\n      content: '🚀';\n      font-size: 1.2rem;\n    }\n    \n    .controls {\n      display: flex;\n      gap: 0.75rem;\n      flex-wrap: wrap;\n      margin-bottom: 1rem;\n    }\n    \n    button {\n      background: var(--primary);\n      color: white;\n      border: none;\n      padding: 0.75rem 1.25rem;\n      border-radius: 8px;\n      cursor: pointer;\n      font-size: 0.95rem;\n      font-weight: 500;\n      transition: all 0.3s ease;\n    }\n    \n    button:hover {\n      background: #3730a3;\n      transform: translateY(-2px);\n      box-shadow: 0 4px 12px rgba(79, 70, 229, 0.3);\n    }\n    \n    button.secondary {\n      background: var(--secondary);\n    }\n    \n    button.secondary:hover {\n      background: #0891b2;\n      box-shadow: 0 4px 12px rgba(6, 182, 212, 0.3);\n    }\n    \n    button.success {\n      background: var(--success);\n    }\n    \n    button.success:hover {\n      background: #059669;\n      box-shadow: 0 4px 12px rgba(16, 185, 129, 0.3);\n    }\n    \n    .output {\n      margin-top: 1rem;\n      padding: 1rem;\n      background: white;\n      border: 1px solid var(--border);\n      border-radius: 8px;\n      min-height: 60px;\n      font-family: 'JetBrains Mono', 'Courier New', monospace;\n      font-size: 0.9rem;\n      white-space: pre-wrap;\n      word-break: break-word;\n    }\n    \n    .data-display {\n      display: grid;\n      grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\n      gap: 1rem;\n      margin: 1rem 0;\n    }\n    \n    .data-item {\n      background: white;\n      padding: 1rem;\n      border-radius: 8px;\n      border: 1px solid var(--border);\n      text-align: center;\n    }\n    \n    .data-item .value {\n      font-size: 1.5rem;\n      font-weight: bold;\n      color: var(--primary);\n      margin-bottom: 0.5rem;\n    }\n    \n    .data-item .label {\n      font-size: 0.9rem;\n      color: #64748b;\n      text-transform: uppercase;\n      letter-spacing: 0.5px;\n    }\n    \n    .array-visualization {\n      display: flex;\n      gap: 0.5rem;\n      flex-wrap: wrap;\n      margin: 1rem 0;\n      padding: 1rem;\n      background: #f1f5f9;\n      border-radius: 8px;\n    }\n    \n    .array-item {\n      background: var(--secondary);\n      color: white;\n      padding: 0.5rem 1rem;\n      border-radius: 6px;\n      font-weight: 500;\n      transition: all 0.3s ease;\n    }\n    \n    .array-item:hover {\n      transform: scale(1.05);\n    }\n    \n    .object-display {\n      background: #f8fafc;\n      padding: 1rem;\n      border-radius: 8px;\n      margin: 1rem 0;\n      border: 1px solid var(--border);\n    }\n    \n    .object-property {\n      display: flex;\n      justify-content: space-between;\n      padding: 0.5rem;\n      border-bottom: 1px solid #e2e8f0;\n    }\n    \n    .object-property:last-child {\n      border-bottom: none;\n    }\n    \n    .property-key {\n      font-weight: 600;\n      color: var(--primary);\n    }\n    \n    .property-value {\n      color: var(--success);\n      font-family: 'JetBrains Mono', monospace;\n    }\n    \n    .input-group {\n      display: flex;\n      gap: 0.5rem;\n      margin-bottom: 1rem;\n      align-items: center;\n    }\n    \n    input, select {\n      padding: 0.5rem;\n      border: 1px solid var(--border);\n      border-radius: 6px;\n      font-size: 1rem;\n    }\n    \n    input:focus, select:focus {\n      outline: none;\n      border-color: var(--primary);\n      box-shadow: 0 0 0 3px rgba(79, 70, 229, 0.1);\n    }\n    \n    .type-indicator {\n      display: inline-block;\n      padding: 0.25rem 0.5rem;\n      border-radius: 4px;\n      font-size: 0.8rem;\n      font-weight: 500;\n      text-transform: uppercase;\n      letter-spacing: 0.5px;\n    }\n    \n    .type-string { background: #fef3c7; color: #92400e; }\n    .type-number { background: #dbeafe; color: #1e40af; }\n    .type-boolean { background: #d1fae5; color: #065f46; }\n    .type-object { background: #e0e7ff; color: #3730a3; }\n    .type-array { background: #fce7f3; color: #be185d; }\n    \n    @media (max-width: 768px) {\n      .controls {\n        flex-direction: column;\n      }\n      \n      button {\n        width: 100%;\n      }\n      \n      .data-display {\n        grid-template-columns: 1fr;\n      }\n      \n      .header h1 {\n        font-size: 2rem;\n      }\n    }\n  </style>\n</head>\n<body>\n  <div class=\"container\">\n    <header class=\"header\">\n      <h1>JavaScript Data Types</h1>\n      <p>Master variables, arrays, objects, and modern JavaScript features</p>\n    </header>\n    \n    <main class=\"content\">\n      <!-- Variable Declaration Demo -->\n      <section class=\"demo-section\">\n        <h3>Variable Declaration & Scope</h3>\n        <p>Explore different variable declaration methods and their scope</p>\n        <div class=\"controls\">\n          <button onclick=\"demonstrateVariables()\">Show Variable Types</button>\n          <button onclick=\"testScope()\" class=\"secondary\">Test Scope</button>\n        </div>\n        <div id=\"variablesOutput\" class=\"output\">Click buttons to see variable demonstrations</div>\n      </section>\n      \n      <!-- Data Types Demo -->\n      <section class=\"demo-section\">\n        <h3>Data Types Explorer</h3>\n        <p>Discover JavaScript's primitive and reference types</p>\n        <div class=\"controls\">\n          <button onclick=\"exploreDataTypes()\">Explore Data Types</button>\n          <button onclick=\"testTypeCoercion()\" class=\"secondary\">Type Coercion</button>\n        </div>\n        <div id=\"dataTypesOutput\" class=\"output\">Data types information will appear here</div>\n        <div id=\"dataDisplay\" class=\"data-display\"></div>\n      </section>\n      \n      <!-- Array Operations Demo -->\n      <section class=\"demo-section\">\n        <h3>Array Operations</h3>\n        <p>Master array methods and manipulation techniques</p>\n        <div class=\"controls\">\n          <button onclick=\"demonstrateArrays()\">Array Methods</button>\n          <button onclick=\"arrayTransformation()\" class=\"secondary\">Transform Arrays</button>\n          <button onclick=\"arraySearch()\" class=\"success\">Search & Filter</button>\n        </div>\n        <div id=\"arrayOutput\" class=\"output\">Array operations will be demonstrated here</div>\n        <div id=\"arrayVisualization\" class=\"array-visualization\"></div>\n      </section>\n      \n      <!-- Object Manipulation Demo -->\n      <section class=\"demo-section\">\n        <h3>Object Manipulation</h3>\n        <p>Work with objects, properties, and methods</p>\n        <div class=\"controls\">\n          <button onclick=\"demonstrateObjects()\">Object Methods</button>\n          <button onclick=\"objectDestructuring()\" class=\"secondary\">Destructuring</button>\n        </div>\n        <div id=\"objectOutput\" class=\"output\">Object demonstrations will appear here</div>\n        <div id=\"objectDisplay\" class=\"object-display\"></div>\n      </section>\n      \n      <!-- Modern JavaScript Demo -->\n      <section class=\"demo-section\">\n        <h3>Modern JavaScript Features</h3>\n        <p>Template literals, spread/rest operators, and destructuring</p>\n        <div class=\"controls\">\n          <button onclick=\"templateLiteralsDemo()\">Template Literals</button>\n          <button onclick=\"spreadRestDemo()\" class=\"secondary\">Spread & Rest</button>\n          <button onclick=\"destructuringDemo()\" class=\"success\">Destructuring</button>\n        </div>\n        <div id=\"modernJSOutput\" class=\"output\">Modern JavaScript features will be demonstrated</div>\n      </section>\n      \n      <!-- Interactive Calculator -->\n      <section class=\"demo-section\">\n        <h3>Interactive Calculator</h3>\n        <p>Apply your knowledge with a practical calculator</p>\n        <div class=\"input-group\">\n          <input type=\"number\" id=\"calcNum1\" placeholder=\"First number\">\n          <select id=\"operation\">\n            <option value=\"add\">+</option>\n            <option value=\"subtract\">-</option>\n            <option value=\"multiply\">×</option>\n            <option value=\"divide\">÷</option>\n            <option value=\"power\">^</option>\n          </select>\n          <input type=\"number\" id=\"calcNum2\" placeholder=\"Second number\">\n          <button onclick=\"calculateAdvanced()\" class=\"success\">Calculate</button>\n        </div>\n        <div id=\"calculatorOutput\" class=\"output\">Calculator results will appear here</div>\n      </section>\n    </main>\n  </div>\n\n  <script>\n    // Variable demonstrations\n    function demonstrateVariables() {\n      const output = document.getElementById('variablesOutput');\n      \n      // Different declaration types\n      var functionScoped = 'I am function scoped';\n      let blockScoped = 'I am block scoped';\n      const immutable = 'I cannot be reassigned';\n      \n      output.textContent = `Variables Demo:\n• var: ${functionScoped}\n• let: ${blockScoped}\n• const: ${immutable}\n\nTry reassigning these variables in the console!`;\n    }\n    \n    function testScope() {\n      const output = document.getElementById('variablesOutput');\n      \n      if (true) {\n        var varVariable = 'Accessible outside block';\n        let letVariable = 'Only accessible in block';\n        const constVariable = 'Also only in block';\n      }\n      \n      try {\n        output.textContent = `Scope Test:\nvarVariable: ${varVariable}\nletVariable: ${letVariable}`;\n      } catch (error) {\n        output.textContent = `Scope Test:\nvarVariable: ${varVariable}\nletVariable: ReferenceError (as expected!)`;\n      }\n    }\n    \n    // Data types exploration\n    function exploreDataTypes() {\n      const output = document.getElementById('dataTypesOutput');\n      const display = document.getElementById('dataDisplay');\n      \n      const examples = {\n        string: 'Hello World',\n        number: 42,\n        boolean: true,\n        undefined: undefined,\n        null: null,\n        array: [1, 2, 3],\n        object: {name: 'JavaScript'}\n      };\n      \n      let content = 'JavaScript Data Types:\\n\\n';\n      display.innerHTML = '';\n      \n      Object.entries(examples).forEach(([type, value]) => {\n        const typeClass = `type-${type}`;\n        content += `${type}: ${JSON.stringify(value)} (typeof: ${typeof value})\\n`;\n        \n        const item = document.createElement('div');\n        item.className = 'data-item';\n        item.innerHTML = `\n          <div class=\"value\">${JSON.stringify(value)}</div>\n          <div class=\"label\">${type} <span class=\"type-indicator ${typeClass}\">${typeof value}</span></div>\n        `;\n        display.appendChild(item);\n      });\n      \n      output.textContent = content;\n    }\n    \n    function testTypeCoercion() {\n      const output = document.getElementById('dataTypesOutput');\n      \n      const examples = [\n        `'5' + 3 = ${'5' + 3} (string concatenation)`,\n        `'5' - 3 = ${'5' - 3} (numeric subtraction)`,\n        `'5' * 3 = ${'5' * 3} (numeric multiplication)`,\n        `true + 1 = ${true + 1} (boolean to number)`,\n        `null == undefined: ${null == undefined}`,\n        `null === undefined: ${null === undefined}`\n      ];\n      \n      output.textContent = 'Type Coercion Examples:\\n\\n' + examples.join('\\n');\n    }\n    \n    // Array demonstrations\n    function demonstrateArrays() {\n      const output = document.getElementById('arrayOutput');\n      const visualization = document.getElementById('arrayVisualization');\n      \n      let fruits = ['apple', 'banana', 'orange'];\n      \n      output.textContent = `Original array: [${fruits.join(', ')}]\\n\\n` +\n        `Array methods:\\n` +\n        `• push('grape'): [${[...fruits, 'grape'].join(', ')}]\\n` +\n        `• pop(): removes '${fruits[fruits.length - 1]}'\\n` +\n        `• unshift('mango'): ['mango', ${fruits.join(', ')}]\\n` +\n        `• length: ${fruits.length}\\n` +\n        `• includes('banana'): ${fruits.includes('banana')}`;\n      \n      visualization.innerHTML = '';\n      fruits.forEach((fruit, index) => {\n        const item = document.createElement('div');\n        item.className = 'array-item';\n        item.textContent = `${index}: ${fruit}`;\n        visualization.appendChild(item);\n      });\n    }\n    \n    function arrayTransformation() {\n      const output = document.getElementById('arrayOutput');\n      const visualization = document.getElementById('arrayVisualization');\n      \n      const numbers = [1, 2, 3, 4, 5];\n      \n      const doubled = numbers.map(n => n * 2);\n      const evens = numbers.filter(n => n % 2 === 0);\n      const sum = numbers.reduce((acc, n) => acc + n, 0);\n      const reversed = [...numbers].reverse();\n      \n      output.textContent = `Original: [${numbers.join(', ')}]\\n\\n` +\n        `Transformations:\\n` +\n        `• map(n => n * 2): [${doubled.join(', ')}]\\n` +\n        `• filter(n => n % 2 === 0): [${evens.join(', ')}]\\n` +\n        `• reduce((acc, n) => acc + n): ${sum}\\n` +\n        `• reverse(): [${reversed.join(', ')}]`;\n      \n      visualization.innerHTML = '';\n      doubled.forEach((num, index) => {\n        const item = document.createElement('div');\n        item.className = 'array-item';\n        item.textContent = `${numbers[index]} → ${num}`;\n        visualization.appendChild(item);\n      });\n    }\n    \n    function arraySearch() {\n      const output = document.getElementById('arrayOutput');\n      const visualization = document.getElementById('arrayVisualization');\n      \n      const data = ['apple', 'banana', 'cherry', 'date', 'elderberry'];\n      \n      const found = data.find(item => item.startsWith('c'));\n      const index = data.findIndex(item => item.startsWith('d'));\n      const filtered = data.filter(item => item.length > 5);\n      const sorted = [...data].sort();\n      \n      output.textContent = `Array: [${data.join(', ')}]\\n\\n` +\n        `Search Results:\\n` +\n        `• find(item => item.startsWith('c')): ${found}\\n` +\n        `• findIndex(item => item.startsWith('d')): ${index}\\n` +\n        `• filter(item => item.length > 5): [${filtered.join(', ')}]\\n` +\n        `• sort(): [${sorted.join(', ')}]`;\n      \n      visualization.innerHTML = '';\n      filtered.forEach(item => {\n        const element = document.createElement('div');\n        element.className = 'array-item';\n        element.textContent = item;\n        visualization.appendChild(element);\n      });\n    }\n    \n    // Object demonstrations\n    function demonstrateObjects() {\n      const output = document.getElementById('objectOutput');\n      const display = document.getElementById('objectDisplay');\n      \n      const person = {\n        name: 'Alice Johnson',\n        age: 28,\n        occupation: 'Software Developer',\n        skills: ['JavaScript', 'React', 'Node.js'],\n        greet: function() {\n          return `Hello, I'm ${this.name}!`;\n        }\n      };\n      \n      output.textContent = `Person Object:\\n` +\n        `• Keys: [${Object.keys(person).join(', ')}]\\n` +\n        `• Values: [${Object.values(person).map(v => typeof v === 'function' ? '[Function]' : JSON.stringify(v)).join(', ')}]\\n` +\n        `• greet(): ${person.greet()}\\n` +\n        `• hasOwnProperty('name'): ${person.hasOwnProperty('name')}`;\n      \n      display.innerHTML = '';\n      Object.entries(person).forEach(([key, value]) => {\n        const property = document.createElement('div');\n        property.className = 'object-property';\n        property.innerHTML = `\n          <span class=\"property-key\">${key}:</span>\n          <span class=\"property-value\">${typeof value === 'function' ? '[Function]' : JSON.stringify(value)}</span>\n        `;\n        display.appendChild(property);\n      });\n    }\n    \n    function objectDestructuring() {\n      const output = document.getElementById('objectOutput');\n      \n      const user = {\n        name: 'Bob Smith',\n        age: 32,\n        email: 'bob@example.com',\n        address: {\n          city: 'San Francisco',\n          state: 'CA'\n        }\n      };\n      \n      // Object destructuring\n      const {name, age, email} = user;\n      const {address: {city, state}} = user;\n      \n      // Array destructuring\n      const [first, second, ...rest] = [1, 2, 3, 4, 5];\n      \n      output.textContent = `Destructuring Examples:\\n\\n` +\n        `Object Destructuring:\\n` +\n        `• const {name, age} = user\\n` +\n        `  → name: '${name}', age: ${age}\\n\\n` +\n        `Nested Destructuring:\\n` +\n        `• const {address: {city}} = user\\n` +\n        `  → city: '${city}'\\n\\n` +\n        `Array Destructuring:\\n` +\n        `• const [first, second, ...rest] = [1,2,3,4,5]\\n` +\n        `  → first: ${first}, rest: [${rest.join(', ')}]`;\n    }\n    \n    // Modern JavaScript features\n    function templateLiteralsDemo() {\n      const output = document.getElementById('modernJSOutput');\n      \n      const name = 'JavaScript';\n      const version = 'ES2023';\n      const features = ['classes', 'modules', 'async/await'];\n      \n      const message = `Hello ${name}!\n\n` +\n        `Current version: ${version}\n` +\n        `Popular features: ${features.join(', ')}\n\n` +\n        `Math: 2 + 2 = ${2 + 2}\n` +\n        `Expression: ${Math.PI.toFixed(2)}`;\n      \n      output.textContent = `Template Literals Demo:\\n\\n${message}`;\n    }\n    \n    function spreadRestDemo() {\n      const output = document.getElementById('modernJSOutput');\n      \n      // Spread operator\n      const arr1 = [1, 2, 3];\n      const arr2 = [4, 5, 6];\n      const combined = [...arr1, ...arr2];\n      \n      const obj1 = {a: 1, b: 2};\n      const obj2 = {c: 3, d: 4};\n      const merged = {...obj1, ...obj2};\n      \n      // Rest operator\n      function sum(...numbers) {\n        return numbers.reduce((acc, num) => acc + num, 0);\n      }\n      \n      output.textContent = `Spread & Rest Operators:\\n\\n` +\n        `Spread with Arrays:\\n` +\n        `• [...[1,2,3], ...[4,5,6]] = [${combined.join(', ')}]\\n\\n` +\n        `Spread with Objects:\\n` +\n        `• {...{a:1,b:2}, ...{c:3,d:4}} = ${JSON.stringify(merged)}\\n\\n` +\n        `Rest Parameters:\\n` +\n        `• sum(1,2,3,4,5) = ${sum(1,2,3,4,5)}`;\n    }\n    \n    function destructuringDemo() {\n      const output = document.getElementById('modernJSOutput');\n      \n      // Array destructuring\n      const [first, second, ...rest] = ['apple', 'banana', 'cherry', 'date'];\n      \n      // Object destructuring\n      const person = {\n        name: 'Charlie',\n        age: 25,\n        city: 'New York',\n        country: 'USA'\n      };\n      \n      const {name, age, ...location} = person;\n      \n      // Default values\n      const [a = 'default', b = 'default'] = ['value1'];\n      \n      output.textContent = `Destructuring Examples:\\n\\n` +\n        `Array Destructuring:\\n` +\n        `• const [first, ...rest] = ['apple', 'banana', 'cherry', 'date']\\n` +\n        `  → first: '${first}', rest: [${rest.map(item => `'${item}'`).join(', ')}]\\n\\n` +\n        `Object Destructuring:\\n` +\n        `• const {name, ...location} = person\\n` +\n        `  → name: '${name}', location: ${JSON.stringify(location)}\\n\\n` +\n        `Default Values:\\n` +\n        `• const [a = 'default'] = ['value1']\\n` +\n        `  → a: '${a}'`;\n    }\n    \n    // Advanced calculator\n    function calculateAdvanced() {\n      const num1 = parseFloat(document.getElementById('calcNum1').value);\n      const num2 = parseFloat(document.getElementById('calcNum2').value);\n      const operation = document.getElementById('operation').value;\n      const output = document.getElementById('calculatorOutput');\n      \n      if (isNaN(num1) || isNaN(num2)) {\n        output.textContent = 'Please enter valid numbers for both inputs';\n        return;\n      }\n      \n      let result;\n      let operationSymbol;\n      \n      switch (operation) {\n        case 'add':\n          result = num1 + num2;\n          operationSymbol = '+';\n          break;\n        case 'subtract':\n          result = num1 - num2;\n          operationSymbol = '-';\n          break;\n        case 'multiply':\n          result = num1 * num2;\n          operationSymbol = '×';\n          break;\n        case 'divide':\n          if (num2 === 0) {\n            output.textContent = 'Error: Division by zero is not allowed';\n            return;\n          }\n          result = num1 / num2;\n          operationSymbol = '÷';\n          break;\n        case 'power':\n          result = Math.pow(num1, num2);\n          operationSymbol = '^';\n          break;\n      }\n      \n      const expression = `${num1} ${operationSymbol} ${num2}`;\n      output.textContent = `${expression} = ${result}\\n\\n` +\n        `Data Types:\\n` +\n        `• ${num1} is a ${typeof num1}\\n` +\n        `• ${num2} is a ${typeof num2}\\n` +\n        `• Result is a ${typeof result}`;\n    }\n    \n    // Initialize the application\n    document.addEventListener('DOMContentLoaded', function() {\n      console.log('JavaScript Data Types Masterclass loaded successfully!');\n      \n      // Demonstrate initial data types\n      setTimeout(() => {\n        exploreDataTypes();\n      }, 500);\n    });\n  </script>\n</body>\n</html>",
      "hints": [
        "Use let and const appropriately for variable declarations",
        "Master array methods like map, filter, reduce, and find",
        "Practice object destructuring and spread/rest operators",
        "Understand type coercion and explicit type conversion",
        "Use template literals for string interpolation",
        "Apply modern JavaScript features in practical scenarios",
        "Create reusable functions with proper parameter handling",
        "Implement error handling and input validation",
        "Use Object methods like keys, values, and entries",
        "Practice array and object manipulation techniques"
      ]
    },
    "nextLesson": "javascript-functions"
  },
  {
    "id": "javascript-functions",
    "title": "Functions and Events",
    "category": "JavaScript",
    "difficulty": "Beginner",
    "duration": "35 minutes",
    "summary": "Master JavaScript functions, events, and advanced programming concepts.",
    "description": "Deep dive into function creation, event handling, asynchronous programming, and modern JavaScript patterns for building interactive web applications.",
    "slides": [
      {
        "id": 1,
        "title": "Function Fundamentals",
        "content": "<h2>Function Fundamentals</h2><p>Functions are the building blocks of JavaScript programs. They allow code reuse and organization.</p><ul><li><strong>Function Declaration:</strong> function name() { ... }</li><li><strong>Function Expression:</strong> const name = function() { ... }</li><li><strong>Arrow Functions:</strong> const name = () => { ... }</li><li><strong>Parameters & Arguments:</strong> Input values for functions</li><li><strong>Return Values:</strong> Output from functions</li></ul>",
        "type": "content"
      },
      {
        "id": 2,
        "title": "Advanced Function Concepts",
        "content": "<h2>Advanced Function Concepts</h2><ul><li><strong>Default Parameters:</strong> function func(a = 1) { ... }</li><li><strong>Rest Parameters:</strong> function func(...args) { ... }</li><li><strong>Function Scope:</strong> Variables accessible within functions</li><li><strong>Closures:</strong> Functions that remember their environment</li><li><strong>Higher-Order Functions:</strong> Functions that take/return functions</li></ul><div class='code-example'><code>function createCounter() {\n  let count = 0;\n  return function() {\n    return ++count;\n  };\n}\nconst counter = createCounter();</code></div>",
        "type": "content"
      },
      {
        "id": 3,
        "title": "Event Handling",
        "content": "<h2>Event Handling</h2><p>Events allow JavaScript to respond to user interactions and browser actions.</p><ul><li><strong>Event Listeners:</strong> element.addEventListener('event', handler)</li><li><strong>Event Object:</strong> Information about the event</li><li><strong>Event Propagation:</strong> Bubbling and capturing</li><li><strong>Event Delegation:</strong> Handle events on parent elements</li><li><strong>Prevent Default:</strong> Stop default browser behavior</li></ul>",
        "type": "content"
      },
      {
        "id": 4,
        "title": "Common Event Types",
        "content": "<h2>Common Event Types</h2><ul><li><strong>Mouse Events:</strong> click, dblclick, mouseover, mouseout</li><li><strong>Keyboard Events:</strong> keydown, keyup, keypress</li><li><strong>Form Events:</strong> submit, input, change, focus, blur</li><li><strong>Window Events:</strong> load, resize, scroll, beforeunload</li><li><strong>Touch Events:</strong> touchstart, touchmove, touchend</li></ul><p>Each event type provides specific information through the event object.</p>",
        "type": "content"
      },
      {
        "id": 5,
        "title": "Asynchronous JavaScript",
        "content": "<h2>Asynchronous JavaScript</h2><p>JavaScript can handle operations that take time without blocking the main thread.</p><ul><li><strong>Callbacks:</strong> Functions passed as arguments</li><li><strong>Promises:</strong> Objects representing future values</li><li><strong>Async/Await:</strong> Syntactic sugar for promises</li><li><strong>Event Loop:</strong> How JavaScript handles asynchronous operations</li><li><strong>Web APIs:</strong> setTimeout, fetch, DOM events</li></ul>",
        "type": "content"
      },
      {
        "id": 6,
        "title": "Promises and Async/Await",
        "content": "<h2>Promises and Async/Await</h2><div class='code-example'><code>// Promise\nfetch('/api/data')\n  .then(response => response.json())\n  .then(data => console.log(data))\n  .catch(error => console.error(error));\n\n// Async/Await\nasync function getData() {\n  try {\n    const response = await fetch('/api/data');\n    const data = await response.json();\n    console.log(data);\n  } catch (error) {\n    console.error(error);\n  }\n}</code></div><p>Promises represent values that may not be available yet. Async/await makes asynchronous code look synchronous.</p>",
        "type": "content"
      },
      {
        "id": 7,
        "title": "Error Handling",
        "content": "<h2>Error Handling</h2><p>JavaScript provides mechanisms to handle runtime errors gracefully.</p><ul><li><strong>Try/Catch:</strong> Handle synchronous errors</li><li><strong>Throw:</strong> Create custom errors</li><li><strong>Finally:</strong> Code that always executes</li><li><strong>Promise Rejection:</strong> Handle async errors</li><li><strong>Global Error Handling:</strong> window.onerror</li></ul><div class='code-example'><code>try {\n  riskyOperation();\n} catch (error) {\n  console.error('Error:', error.message);\n} finally {\n  cleanup();\n}</code></div>",
        "type": "content"
      },
      {
        "id": 8,
        "title": "Modern JavaScript Patterns",
        "content": "<h2>Modern JavaScript Patterns</h2><ul><li><strong>Modules:</strong> import/export for code organization</li><li><strong>Classes:</strong> Object-oriented programming</li><li><strong>Destructuring:</strong> Unpack arrays and objects</li><li><strong>Spread/Rest:</strong> Expand/collect values</li><li><strong>Template Literals:</strong> Enhanced string interpolation</li></ul><p>Modern JavaScript provides cleaner, more maintainable code patterns.</p>",
        "type": "content"
      },
      {
        "id": 9,
        "title": "DOM Manipulation Advanced",
        "content": "<h2>DOM Manipulation Advanced</h2><ul><li><strong>Query Selectors:</strong> querySelector, querySelectorAll</li><li><strong>Element Creation:</strong> createElement, createTextNode</li><li><strong>Class Manipulation:</strong> classList.add/remove/toggle</li><li><strong>Attribute Handling:</strong> setAttribute, getAttribute</li><li><strong>Event Delegation:</strong> Handle events on dynamic elements</li></ul><div class='code-example'><code>// Event delegation\ndocument.addEventListener('click', function(e) {\n  if (e.target.matches('.dynamic-button')) {\n    handleClick(e.target);\n  }\n});</code></div>",
        "type": "content"
      },
      {
        "id": 10,
        "title": "Performance Considerations",
        "content": "<h2>Performance Considerations</h2><ul><li><strong>Debouncing:</strong> Limit function call frequency</li><li><strong>Throttling:</strong> Control execution rate</li><li><strong>Memory Management:</strong> Avoid memory leaks</li><li><strong>Efficient DOM Updates:</strong> Minimize reflows/repaints</li><li><strong>Lazy Loading:</strong> Load content as needed</li></ul><p>Performance optimization is crucial for smooth user experiences.</p>",
        "type": "content"
      }
    ],
    "learningObjectives": [
      "Master different function declaration and expression types",
      "Implement advanced event handling and delegation",
      "Work with asynchronous JavaScript using promises and async/await",
      "Apply error handling and debugging techniques",
      "Use modern JavaScript patterns and features",
      "Optimize code performance and user experience",
      "Create interactive quiz games with functions and events"
    ],
    "exercise": {
      "description": "Create an interactive quiz game using functions and events.",
      "starter": "<!DOCTYPE html>\n<html>\n<head>\n  <title>JavaScript Quiz Game</title>\n  <style>\n    body {\n      font-family: Arial, sans-serif;\n      max-width: 600px;\n      margin: 50px auto;\n      padding: 20px;\n    }\n    .quiz-container {\n      background: #f8f9fa;\n      padding: 30px;\n      border-radius: 10px;\n      border: 2px solid #dee2e6;\n    }\n    .question {\n      font-size: 18px;\n      margin-bottom: 20px;\n      color: #2c3e50;\n    }\n    .options {\n      margin: 20px 0;\n    }\n    .option {\n      display: block;\n      width: 100%;\n      padding: 10px;\n      margin: 10px 0;\n      background: white;\n      border: 2px solid #dee2e6;\n      border-radius: 5px;\n      cursor: pointer;\n      text-align: left;\n    }\n    .option:hover {\n      background: #e9ecef;\n    }\n    .option.selected {\n      background: #007bff;\n      color: white;\n    }\n    .option.correct {\n      background: #28a745;\n      color: white;\n    }\n    .option.incorrect {\n      background: #dc3545;\n      color: white;\n    }\n    button {\n      background: #28a745;\n      color: white;\n      border: none;\n      padding: 15px 30px;\n      font-size: 16px;\n      border-radius: 5px;\n      cursor: pointer;\n      margin: 10px 5px;\n    }\n    button:hover {\n      background: #218838;\n    }\n    button:disabled {\n      background: #6c757d;\n      cursor: not-allowed;\n    }\n    #score {\n      font-size: 18px;\n      font-weight: bold;\n      margin: 20px 0;\n    }\n  </style>\n</head>\n<body>\n  <div class=\"quiz-container\">\n    <h1>JavaScript Quiz Game</h1>\n    <div id=\"question\" class=\"question\">Loading question...</div>\n    <div id=\"options\" class=\"options\"></div>\n    <button id=\"nextBtn\" onclick=\"nextQuestion()\" disabled>Next Question</button>\n    <button id=\"restartBtn\" onclick=\"restartQuiz()\" style=\"display: none;\">Restart Quiz</button>\n    <div id=\"score\"></div>\n  </div>\n  \n  <script>\n    const questions = [\n      {\n        question: \"What does HTML stand for?\",\n        options: [\"HyperText Markup Language\", \"High Tech Modern Language\", \"Home Tool Markup Language\", \"Hyperlink and Text Markup Language\"],\n        correct: 0\n      },\n      {\n        question: \"Which CSS property changes text color?\",\n        options: [\"text-color\", \"color\", \"font-color\", \"text-style\"],\n        correct: 1\n      },\n      {\n        question: \"What is JavaScript primarily used for?\",\n        options: [\"Styling web pages\", \"Creating web page structure\", \"Adding interactivity to web pages\", \"Creating databases\"],\n        correct: 2\n      }\n    ];\n    \n    let currentQuestion = 0;\n    let score = 0;\n    let selectedAnswer = null;\n    \n    function loadQuestion() {\n      const question = questions[currentQuestion];\n      document.getElementById('question').textContent = question.question;\n      \n      const optionsContainer = document.getElementById('options');\n      optionsContainer.innerHTML = '';\n      \n      question.options.forEach((option, index) => {\n        const button = document.createElement('button');\n        button.className = 'option';\n        button.textContent = option;\n        button.onclick = () => selectAnswer(index);\n        optionsContainer.appendChild(button);\n      });\n      \n      document.getElementById('nextBtn').disabled = true;\n      selectedAnswer = null;\n    }\n    \n    function selectAnswer(index) {\n      selectedAnswer = index;\n      const options = document.querySelectorAll('.option');\n      options.forEach((option, i) => {\n        option.classList.remove('selected');\n        if (i === index) {\n          option.classList.add('selected');\n        }\n      });\n      document.getElementById('nextBtn').disabled = false;\n    }\n    \n    function nextQuestion() {\n      if (selectedAnswer === questions[currentQuestion].correct) {\n        score++;\n      }\n      \n      currentQuestion++;\n      \n      if (currentQuestion < questions.length) {\n        loadQuestion();\n      } else {\n        showResults();\n      }\n    }\n    \n    function showResults() {\n      document.getElementById('question').textContent = 'Quiz Complete!';\n      document.getElementById('options').innerHTML = '';\n      document.getElementById('nextBtn').style.display = 'none';\n      document.getElementById('restartBtn').style.display = 'inline-block';\n      document.getElementById('score').innerHTML = `Your Score: ${score}/${questions.length}`;\n    }\n    \n    function restartQuiz() {\n      currentQuestion = 0;\n      score = 0;\n      document.getElementById('nextBtn').style.display = 'inline-block';\n      document.getElementById('restartBtn').style.display = 'none';\n      document.getElementById('score').innerHTML = '';\n      loadQuestion();\n    }\n    \n    // Start the quiz\n    loadQuestion();\n  </script>\n</body>\n</html>",
      "hints": [
        "Use arrays to store quiz data",
        "Create elements dynamically with JavaScript",
        "Use event listeners for user interactions"
      ]
    },
    "nextLesson": null
  }
]
