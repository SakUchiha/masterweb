class KidLearnerApp{constructor(){this.initialized=!1,this.components=new Map}async init(){if(!this.initialized)try{await this.initConfig(),await this.initErrorBoundary(),await this.initAPI(),await this.initUI(),await this.initComponents(),await this.checkAPIHealth(),this.initialized=!0}catch(e){this.handleInitError(e)}}async initConfig(){if(!window.CONFIG)throw new Error("Configuration not loaded")}async initErrorBoundary(){if(!window.errorBoundary)throw new Error("Error boundary not loaded")}async initAPI(){if(!window.apiService)throw new Error("API service not loaded")}async initUI(){if(!window.uiManager)throw new Error("UI manager not loaded")}async initComponents(){switch(this.getCurrentPage()){case"index":case"study-guide":this.initProgressDisplay();break;case"lessons":"function"==typeof loadLessons&&loadLessons(),this.initProgressTracking();break;case"editor":case"ai":case"lesson-viewer":this.initProgressTracking()}}async checkAPIHealth(){try{await apiService.checkAvailability()||uiManager.showNotification("Backend service is not available. Some features may not work properly.","warning")}catch(e){uiManager.showNotification("Unable to connect to backend services. Please check your connection.","warning")}}getCurrentPage(){return{"index.html":"index","lessons.html":"lessons","editor.html":"editor","ai.html":"ai","study-guide.html":"study-guide","lesson-viewer.html":"lesson-viewer"}[window.location.pathname.split("/").pop()||"index.html"]||"unknown"}handleInitError(e){const i=`\n      <div style="text-align: center; padding: 20px;">\n        <i class="fas fa-exclamation-triangle" style="font-size: 3rem; color: #dc3545; margin-bottom: 1rem;"></i>\n        <h2>Application Failed to Load</h2>\n        <p>Sorry, we encountered an error while loading the application.</p>\n        <p><strong>Error:</strong> ${e.message}</p>\n        <button onclick="window.location.reload()" class="btn btn-primary" style="margin-top: 1rem;">\n          <i class="fas fa-refresh"></i> Reload Application\n        </button>\n      </div>\n    `;window.uiManager?uiManager.showNotification(i,"error",0):alert("Application failed to load. Please refresh the page.")}registerComponent(e,i){this.components.set(e,i)}getComponent(e){return this.components.get(e)}isReady(){return this.initialized}initProgressDisplay(){window.progressTracker&&window.gamificationSystem&&this.createProgressDashboard()}initProgressTracking(){window.progressTracker&&(window.progressTracker.checkDailyGoals(),this.startTimeTracking())}startTimeTracking(){this.pageStartTime=Date.now(),this.timeTrackingInterval=setInterval(()=>{Math.floor((Date.now()-this.pageStartTime)/1e3/60)>=1&&window.progressTracker&&(window.progressTracker.addTimeSpent(1),this.pageStartTime=Date.now())},6e4)}createProgressDashboard(){const e=window.progressTracker.getStats(),i=window.gamificationSystem.getCurrentLevel(),n=window.gamificationSystem.getLevelProgress(),t=document.createElement("div");t.id="progress-dashboard",t.className="progress-dashboard",t.innerHTML=`\n      <div class="dashboard-header">\n        <h3>üìä Your Learning Progress</h3>\n        <div class="level-display">\n          <span class="level-badge">${i.badge}</span>\n          <span class="level-text">Level ${e.level.level}: ${e.level.name}</span>\n        </div>\n      </div>\n\n      <div class="dashboard-stats">\n        <div class="stat-card">\n          <div class="stat-icon">üìö</div>\n          <div class="stat-value">${e.lessonsCompleted}</div>\n          <div class="stat-label">Lessons</div>\n        </div>\n        <div class="stat-card">\n          <div class="stat-icon">üéØ</div>\n          <div class="stat-value">${e.averageQuizScore.toFixed(0)}%</div>\n          <div class="stat-label">Avg Score</div>\n        </div>\n        <div class="stat-card">\n          <div class="stat-icon">üî•</div>\n          <div class="stat-value">${e.currentStreak}</div>\n          <div class="stat-label">Day Streak</div>\n        </div>\n        <div class="stat-card">\n          <div class="stat-icon">‚≠ê</div>\n          <div class="stat-value">${e.points}</div>\n          <div class="stat-label">Points</div>\n        </div>\n      </div>\n\n      <div class="level-progress">\n        <div class="progress-bar">\n          <div class="progress-fill" style="width: ${n.current}%"></div>\n        </div>\n        <div class="progress-text">${n.remaining>0?`${n.remaining} points to next level`:"Max level reached!"}</div>\n      </div>\n\n      <div class="recent-achievements">\n        <h4>üèÜ Recent Achievements</h4>\n        <div class="achievement-list">\n          ${e.achievements.slice(-3).map(e=>`\n            <div class="achievement-item">\n              <span class="achievement-icon">${e.icon}</span>\n              <span class="achievement-name">${e.name}</span>\n            </div>\n          `).join("")}\n        </div>\n      </div>\n    `;const a=document.querySelector(".features");a&&a.parentNode.insertBefore(t,a)}getInfo(){return{version:"1.0.0",initialized:this.initialized,page:this.getCurrentPage(),config:CONFIG,components:Array.from(this.components.keys()),progressTracking:!!window.progressTracker,gamification:!!window.gamificationSystem}}}const kidLearnerApp=new KidLearnerApp;function showUpdateUI(e){if(document.getElementById("sw-update-toast"))return;const i=document.createElement("div");i.id="sw-update-toast",i.style.position="fixed",i.style.right="20px",i.style.bottom="20px",i.style.background="var(--card, #fff)",i.style.color="var(--text, #111)",i.style.border="1px solid rgba(0,0,0,0.08)",i.style.padding="12px 14px",i.style.borderRadius="8px",i.style.boxShadow="0 6px 20px rgba(0,0,0,0.12)",i.style.zIndex=1e4,i.innerHTML='\n    <div style="display:flex;gap:10px;align-items:center;">\n      <div style="flex:1">A new version is available.</div>\n      <button id="sw-update-btn" style="background:#4f46e5;color:#fff;border:none;padding:8px 10px;border-radius:6px;cursor:pointer">Refresh</button>\n      <button id="sw-update-dismiss" style="background:transparent;color:#666;border:none;padding:6px 8px;border-radius:6px;cursor:pointer">Dismiss</button>\n    </div>\n  ',document.body.appendChild(i);const n=document.getElementById("sw-update-btn"),t=document.getElementById("sw-update-dismiss");n.addEventListener("click",()=>{e&&e.waiting&&e.waiting.postMessage({type:"SKIP_WAITING"})}),t.addEventListener("click",()=>{i.remove()})}window.kidLearnerApp=kidLearnerApp,document.addEventListener("DOMContentLoaded",()=>{kidLearnerApp.init()}),"serviceWorker"in navigator&&(navigator.serviceWorker.register("/sw.js").then(e=>{e.waiting&&showUpdateUI(e),e.addEventListener("updatefound",()=>{const i=e.installing;i.addEventListener("statechange",()=>{"installed"===i.state&&navigator.serviceWorker.controller&&showUpdateUI(e)})})}).catch(e=>{}),navigator.serviceWorker.addEventListener("controllerchange",()=>{window.location.reload()})),"undefined"!=typeof module&&module.exports&&(module.exports=KidLearnerApp);