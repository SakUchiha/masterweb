class AIChatOnly{constructor(){this.chatMessages=document.getElementById("chatMessages"),this.chatInput=document.getElementById("chatInput"),this.sendButton=document.getElementById("sendButton"),this.init()}init(){this.setupEventListeners()}setupEventListeners(){this.sendButton.addEventListener("click",()=>this.sendMessage()),this.chatInput.addEventListener("keypress",e=>{"Enter"!==e.key||e.shiftKey||(e.preventDefault(),this.sendMessage())})}async sendMessage(){const e=this.chatInput.value.trim();e&&(this.addMessage("user",e),this.chatInput.value="",this.showTypingIndicator(),await this.processWithGroq(e))}addMessage(e,s){const t=document.createElement("div");t.className=`message ${e}-message`;const n="ai"===e?"🤖":"👤",a="ai"===e?"AI Assistant":"You";t.innerHTML=`\n      <div class="message-avatar">${n}</div>\n      <div class="message-content">\n        <div class="message-sender">${a}</div>\n        <div class="message-text">${this.formatResponse(s)}</div>\n      </div>\n    `,this.chatMessages.appendChild(t),this.chatMessages.scrollTop=this.chatMessages.scrollHeight}showTypingIndicator(){const e=document.createElement("div");e.className="message ai-message typing-indicator",e.id="typing-indicator",e.innerHTML='\n      <div class="message-avatar">🤖</div>\n      <div class="message-content">\n        <div class="message-sender">AI Assistant</div>\n        <div class="message-text">\n          <span class="typing-dots">\n            <span></span><span></span><span></span>\n          </span>\n        </div>\n      </div>\n    ',this.chatMessages.appendChild(e),this.chatMessages.scrollTop=this.chatMessages.scrollHeight}hideTypingIndicator(){const e=document.getElementById("typing-indicator");e&&e.remove()}formatResponse(e){return e=(e=(e=e.replace(/```(\w+)?\n([\s\S]*?)```/g,(e,s,t)=>`<pre><code class="language-${s||"text"}">${this.escapeHtml(t.trim())}</code></pre>`)).replace(/`([^`]+)`/g,"<code>$1</code>")).replace(/\n/g,"<br>")}escapeHtml(e){const s=document.createElement("div");return s.textContent=e,s.innerHTML}isCodeLike(e){return!!e&&(!!/```/.test(e)||(e.split("\n").length>4||!(!/[{}<>;\/=\*]/.test(e)||!/function|const|let|var|class|import|export/.test(e))))}extractCode(e){const s=e.match(/```(?:\w+)?\n([\s\S]*?)```/);return s&&s[1]?s[1].trim():e.trim()}async processWithGroq(e){try{if(uiManager.setButtonLoading("sendButton",!0,"Thinking..."),this.isCodeLike(e)){const s=this.extractCode(e);let t=e.match(/```(\w+)\n/),n=t?t[1].toLowerCase():"javascript";const a=await apiService.post("/api/groq",{code:s,language:n});uiManager.setButtonLoading("sendButton",!1),this.hideTypingIndicator();const i=a.response||a.explanation||a.choices?.[0]?.message?.content||"Sorry, I couldn't generate a code explanation.";this.addMessage("ai",this.formatResponse(i))}else{const s=await apiService.post("/api/groq",{messages:[{role:"user",content:e}],model:"llama-3.1-8b-instant"});uiManager.setButtonLoading("sendButton",!1),this.hideTypingIndicator();const t=s.response||s.choices?.[0]?.message?.content||"Sorry, I couldn't generate a response.";this.addMessage("ai",this.formatResponse(t))}window.progressTracker&&window.progressTracker.incrementAIInteractions()}catch(s){uiManager.setButtonLoading("sendButton",!1),this.hideTypingIndicator();let t=CONFIG.MESSAGES.AI_UNAVAILABLE;s.message.includes("API key")||s.message.includes("API_KEY")?t="❌ Groq API key is not configured. Please add GROQ_API_KEY to the backend .env file.":(s.message.includes("timeout")||s.message.includes("network"))&&(t=`❌ Network error. ${CONFIG.MESSAGES.NETWORK_ERROR}`),this.addMessage("ai",t),uiManager.showError(t,()=>this.processWithGroq(e))}}}let aiChatOnly;document.addEventListener("DOMContentLoaded",()=>{aiChatOnly=new AIChatOnly});