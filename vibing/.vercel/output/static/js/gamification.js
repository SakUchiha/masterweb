class GamificationSystem{constructor(e){this.progressTracker=e,this.leaderboard=[],this.init()}init(){this.loadLeaderboard(),this.setupPointSystem(),this.setupLevelSystem()}setupPointSystem(){this.pointMultipliers={lesson_completion:15,quiz_perfect:25,quiz_good:10,quiz_average:5,streak_bonus:5,daily_goal:20,achievement_unlock:e=>e.points||10}}setupLevelSystem(){}awardPoints(e,t={}){const r=this.progressTracker.getProgress();let s=0;switch(e){case"lesson_completion":s=this.pointMultipliers.lesson_completion,t.timeBonus&&(s+=Math.floor(t.timeSpent/10));break;case"quiz_score":100===t.score?s=this.pointMultipliers.quiz_perfect:t.score>=80?s=this.pointMultipliers.quiz_good:t.score>=60&&(s=this.pointMultipliers.quiz_average);break;case"streak_bonus":s=this.pointMultipliers.streak_bonus*t.streakLength;break;case"daily_goal":s=this.pointMultipliers.daily_goal;break;case"achievement":s=this.pointMultipliers.achievement_unlock(t.achievement)}return this.progressTracker.addPoints(s,r),this.showPointsNotification(s,e),s}showPointsNotification(e,t){const r=document.createElement("div");r.className="points-notification",r.textContent=`+${e} points`,r.style.cssText="\n      position: fixed;\n      top: 50%;\n      left: 50%;\n      transform: translate(-50%, -50%);\n      background: linear-gradient(135deg, #10b981 0%, #059669 100%);\n      color: white;\n      padding: 12px 24px;\n      border-radius: 25px;\n      font-weight: bold;\n      font-size: 16px;\n      z-index: 10001;\n      animation: pointsFloat 2s ease-out forwards;\n      pointer-events: none;\n    ",document.body.appendChild(r),setTimeout(()=>{r.remove()},2e3)}getCurrentLevel(){const e=this.progressTracker.getProgress();return this.progressTracker.getCurrentLevel(e.points)}getNextLevel(){const e=this.getCurrentLevel();return this.progressTracker.levels.find(t=>t.level===e.level+1)}getLevelProgress(){const e=this.progressTracker.getProgress(),t=this.getCurrentLevel(),r=this.getNextLevel();if(!r)return{current:100,needed:0,remaining:0};const s=e.points-t.pointsRequired,a=r.pointsRequired-t.pointsRequired,n=r.pointsRequired-e.points;return{current:Math.floor(s/a*100),needed:a,remaining:n}}loadLeaderboard(){const e=localStorage.getItem("kidlearner_leaderboard");this.leaderboard=e?JSON.parse(e):this.generateMockLeaderboard()}saveLeaderboard(){localStorage.setItem("kidlearner_leaderboard",JSON.stringify(this.leaderboard))}updateLeaderboardEntry(e,t,r=null){const s=this.leaderboard.find(t=>t.name===e);s?t>s.score&&(s.score=t,s.lastUpdated=(new Date).toISOString()):this.leaderboard.push({name:e,score:t,avatar:r||this.generateRandomAvatar(),lastUpdated:(new Date).toISOString()}),this.leaderboard.sort((e,t)=>t.score-e.score),this.leaderboard=this.leaderboard.slice(0,10),this.saveLeaderboard()}generateMockLeaderboard(){return["Alex","Jordan","Taylor","Morgan","Casey","Riley","Avery","Quinn"].map(e=>({name:e,score:Math.floor(1e3*Math.random())+100,avatar:this.generateRandomAvatar(),lastUpdated:(new Date).toISOString()})).sort((e,t)=>t.score-e.score)}generateRandomAvatar(){const e=["üê±","üê∂","ü¶ä","üêª","üêº","üê®","üêØ","ü¶Å","üê∏","üêµ"];return e[Math.floor(Math.random()*e.length)]}getLeaderboard(e=null){return null!==e?this.leaderboard.slice(0,e):this.leaderboard}getUserRank(e){const t=this.leaderboard.findIndex(t=>t.name===e);return t>=0?t+1:null}generateDailyChallenge(){const e=[{type:"lessons",target:2,reward:25,description:"Complete 2 lessons today"},{type:"quizzes",target:3,reward:30,description:"Score 80%+ on 3 quizzes"},{type:"streak",target:5,reward:40,description:"Maintain a 5-day streak"},{type:"time",target:60,reward:35,description:"Study for 60 minutes"}];return e[Math.floor(Math.random()*e.length)]}checkDailyChallenge(e){const t=this.progressTracker.getProgress();let r=!1;switch(e.type){case"lessons":r=t.dailyGoals.lessons>=e.target;break;case"quizzes":r=t.quizScores.filter(e=>new Date(e.date).toDateString()===(new Date).toDateString()&&e.score>=80).length>=e.target;break;case"streak":r=t.currentStreak>=e.target;break;case"time":r=t.timeSpent>=e.target}return r&&!e.claimed&&(this.awardPoints("daily_goal"),e.claimed=!0,this.showChallengeCompleteNotification(e)),r}showChallengeCompleteNotification(e){setTimeout(()=>{alert(`üéØ Daily Challenge Complete!\n\n${e.description}\n\n+${e.reward} points awarded!`)},1e3)}getStreakReward(e){return{3:{points:10,message:"Great start! Keep it up!"},7:{points:25,message:"Week warrior! You're on fire!"},14:{points:50,message:"Two weeks strong! Amazing dedication!"},30:{points:100,message:"Monthly champion! You're unstoppable!"},50:{points:200,message:"Golden streak! Legendary learner!"}}[e]||null}checkStreakRewards(){const e=this.progressTracker.getProgress(),t=this.getStreakReward(e.currentStreak);t&&!e.streakRewards?.includes(e.currentStreak)&&(this.awardPoints("streak_bonus",{streakLength:e.currentStreak}),this.showStreakRewardNotification(t),e.streakRewards||(e.streakRewards=[]),e.streakRewards.push(e.currentStreak),this.progressTracker.saveProgress(e))}showStreakRewardNotification(e){setTimeout(()=>{alert(`üî• Streak Reward!\n\n${e.message}\n\n+${e.points} bonus points!`)},1500)}createProgressBar(e,t,r=""){return`\n      <div class="progress-container ${r}">\n        <div class="progress-bar">\n          <div class="progress-fill" style="width: ${Math.min(e/t*100,100)}%"></div>\n        </div>\n        <span class="progress-text">${e}/${t}</span>\n      </div>\n    `}createLevelIndicator(){const e=this.getCurrentLevel(),t=this.getLevelProgress();return`\n      <div class="level-indicator">\n        <div class="level-badge">${e.badge}</div>\n        <div class="level-info">\n          <div class="level-name">Level ${e.level}: ${e.name}</div>\n          <div class="level-progress">${this.createProgressBar(t.current,100,"level-progress-bar")}</div>\n          ${t.remaining>0?`<div class="points-needed">${t.remaining} points to next level</div>`:'<div class="max-level">Max level reached!</div>'}\n        </div>\n      </div>\n    `}createLeaderboardWidget(e=5){return`\n      <div class="leaderboard-widget">\n        <h3>üèÜ Leaderboard</h3>\n        <div class="leaderboard-entries">\n          ${this.getLeaderboard(e).map((e,t)=>`\n            <div class="leaderboard-entry ${t<3?"top-three":""}">\n              <span class="rank">#${t+1}</span>\n              <span class="avatar">${e.avatar}</span>\n              <span class="name">${e.name}</span>\n              <span class="score">${e.score}</span>\n            </div>\n          `).join("")}\n        </div>\n      </div>\n    `}}let gamificationSystem;document.addEventListener("DOMContentLoaded",()=>{window.progressTracker&&(gamificationSystem=new GamificationSystem(window.progressTracker))});